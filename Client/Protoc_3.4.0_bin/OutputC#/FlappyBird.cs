// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FlappyBird.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace FlappyBird {

  #region Enums
  public enum ProtocolCmd {
    /// <summary>
    ///=================================通用协议=================================
    /// </summary>
    Zero = 0,
    /// <summary>
    ///请求加入房间
    /// </summary>
    CsjoinRoomReq = 1001,
    /// <summary>
    ///请求加入房间
    /// </summary>
    ScjoinRoomRep = 1002,
    /// <summary>
    ///退出
    /// </summary>
    CslogOutReq = 1003,
    /// <summary>
    ///退出
    /// </summary>
    SclogOutRep = 1004,
    /// <summary>
    ///协议转发
    /// </summary>
    CsccommonReq = 1005,
    /// <summary>
    ///协议转发		
    /// </summary>
    ScccommonRep = 1006,
    /// <summary>
    ///协议接受	
    /// </summary>
    CscreceiveRep = 1007,
    /// <summary>
    ///心跳协议请求
    /// </summary>
    CsheartBeatReq = 1010,
    /// <summary>
    ///心跳协议返回
    /// </summary>
    ScheartBeatRep = 1011,
    /// <summary>
    ///同步服务器时钟到客户端请求
    /// </summary>
    CssynSvrClockReq = 1012,
    /// <summary>
    ///同步服务器时钟到客户端返回
    /// </summary>
    ScsynSvrClockRep = 1013,
    /// <summary>
    ///游戏结束
    /// </summary>
    CsaroundOverReq = 1014,
    /// <summary>
    ///游戏结束
    /// </summary>
    ScaroundOverRep = 1015,
    /// <summary>
    ///加载进度
    /// </summary>
    CsprogressRateReq = 1016,
    /// <summary>
    ///加载进度
    /// </summary>
    ScprogressRateRep = 1017,
    /// <summary>
    ///游戏开始
    /// </summary>
    ScgameStartRep = 1018,
    /// <summary>
    ///请求游戏数据
    /// </summary>
    CsgameDataResetReq = 1019,
    /// <summary>
    ///上传游戏得分
    /// </summary>
    CsgameTimeReq = 1020,
    /// <summary>
    ///上传游戏得分
    /// </summary>
    ScgameTimeRep = 1021,
    /// <summary>
    ///请求平局
    /// </summary>
    CspeaceReq = 1022,
    /// <summary>
    ///询问对手是否平局 
    /// </summary>
    ScaskPeaceRep = 1023,
    /// <summary>
    ///平局询问结果 
    /// </summary>
    CsaskPeaceReq = 1024,
    /// <summary>
    ///平局询问结果返回 
    /// </summary>
    CsaskPeaceRep = 1025,
    /// <summary>
    ///认输
    /// </summary>
    CssurrenderReq = 1026,
    /// <summary>
    ///游戏结束确认
    /// </summary>
    CsgameOverRep = 1027,
    /// <summary>
    ///================================逻辑协议==================================
    /// </summary>
    ScgameDataResetRep = 2001,
    /// <summary>
    ///上报玩家位置及旋转信息
    /// </summary>
    CsplayerPosReq = 2002,
    /// <summary>
    ///接受玩家位置及旋转信息
    /// </summary>
    ScplayerPosRep = 2003,
    /// <summary>
    ///发送获取管道请求
    /// </summary>
    CsblockReq = 2004,
    /// <summary>
    ///接受管道数据
    /// </summary>
    ScblockRep = 2005,
  }

  public enum ERROCODE {
    None = 0,
    Successful = 1,
  }

  #endregion

  #region Messages
  public sealed class pkgCSJoinRoomReq : pb::IMessage {
    private static readonly pb::MessageParser<pkgCSJoinRoomReq> _parser = new pb::MessageParser<pkgCSJoinRoomReq>(() => new pkgCSJoinRoomReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgCSJoinRoomReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "iroomid" field.</summary>
    public const int IroomidFieldNumber = 1;
    private long iroomid_;
    /// <summary>
    ///房间号 玩家id在消息头种赋值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Iroomid {
      get { return iroomid_; }
      set {
        iroomid_ = value;
      }
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 2;
    private int userId_;
    /// <summary>
    ///玩家id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 3;
    private string token_ = "";
    /// <summary>
    ///玩家toten
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Iroomid != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Iroomid);
      }
      if (UserId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(UserId);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Token);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Iroomid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Iroomid);
      }
      if (UserId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserId);
      }
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Iroomid = input.ReadInt64();
            break;
          }
          case 16: {
            UserId = input.ReadInt32();
            break;
          }
          case 26: {
            Token = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed class pkgSCJoinRoomRep : pb::IMessage {
    private static readonly pb::MessageParser<pkgSCJoinRoomRep> _parser = new pb::MessageParser<pkgSCJoinRoomRep>(() => new pkgSCJoinRoomRep());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgSCJoinRoomRep> Parser { get { return _parser; } }

    /// <summary>Field number for the "ok" field.</summary>
    public const int OkFieldNumber = 1;
    private int ok_;
    /// <summary>
    ///1成功 0失败
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ok {
      get { return ok_; }
      set {
        ok_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ok != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ok);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ok != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ok);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ok = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class pkgCSLogOutReq : pb::IMessage {
    private static readonly pb::MessageParser<pkgCSLogOutReq> _parser = new pb::MessageParser<pkgCSLogOutReq>(() => new pkgCSLogOutReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgCSLogOutReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "ok" field.</summary>
    public const int OkFieldNumber = 1;
    private int ok_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ok {
      get { return ok_; }
      set {
        ok_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ok != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ok);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ok != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ok);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ok = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class pkgSCLogOutRep : pb::IMessage {
    private static readonly pb::MessageParser<pkgSCLogOutRep> _parser = new pb::MessageParser<pkgSCLogOutRep>(() => new pkgSCLogOutRep());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgSCLogOutRep> Parser { get { return _parser; } }

    /// <summary>Field number for the "ok" field.</summary>
    public const int OkFieldNumber = 1;
    private int ok_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ok {
      get { return ok_; }
      set {
        ok_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ok != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ok);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ok != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ok);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ok = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class pkgCSCCommonReq : pb::IMessage {
    private static readonly pb::MessageParser<pkgCSCCommonReq> _parser = new pb::MessageParser<pkgCSCCommonReq>(() => new pkgCSCCommonReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgCSCCommonReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "ok" field.</summary>
    public const int OkFieldNumber = 1;
    private int ok_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ok {
      get { return ok_; }
      set {
        ok_ = value;
      }
    }

    /// <summary>Field number for the "protocol" field.</summary>
    public const int ProtocolFieldNumber = 2;
    private pb::ByteString protocol_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Protocol {
      get { return protocol_; }
      set {
        protocol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ok != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ok);
      }
      if (Protocol.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Protocol);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ok != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ok);
      }
      if (Protocol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Protocol);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ok = input.ReadInt32();
            break;
          }
          case 18: {
            Protocol = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed class pkgSCCCommonRep : pb::IMessage {
    private static readonly pb::MessageParser<pkgSCCCommonRep> _parser = new pb::MessageParser<pkgSCCCommonRep>(() => new pkgSCCCommonRep());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgSCCCommonRep> Parser { get { return _parser; } }

    /// <summary>Field number for the "ok" field.</summary>
    public const int OkFieldNumber = 1;
    private int ok_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ok {
      get { return ok_; }
      set {
        ok_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ok != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ok);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ok != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ok);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ok = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class pkgCSCReceiveRep : pb::IMessage {
    private static readonly pb::MessageParser<pkgCSCReceiveRep> _parser = new pb::MessageParser<pkgCSCReceiveRep>(() => new pkgCSCReceiveRep());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgCSCReceiveRep> Parser { get { return _parser; } }

    /// <summary>Field number for the "nTimes" field.</summary>
    public const int NTimesFieldNumber = 1;
    private int nTimes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NTimes {
      get { return nTimes_; }
      set {
        nTimes_ = value;
      }
    }

    /// <summary>Field number for the "protocol" field.</summary>
    public const int ProtocolFieldNumber = 2;
    private pb::ByteString protocol_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Protocol {
      get { return protocol_; }
      set {
        protocol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NTimes != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(NTimes);
      }
      if (Protocol.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Protocol);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NTimes);
      }
      if (Protocol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Protocol);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            NTimes = input.ReadInt32();
            break;
          }
          case 18: {
            Protocol = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed class pkgCSHeartBeatReq : pb::IMessage {
    private static readonly pb::MessageParser<pkgCSHeartBeatReq> _parser = new pb::MessageParser<pkgCSHeartBeatReq>(() => new pkgCSHeartBeatReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgCSHeartBeatReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "ok" field.</summary>
    public const int OkFieldNumber = 1;
    private int ok_;
    /// <summary>
    ///任意值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ok {
      get { return ok_; }
      set {
        ok_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ok != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ok);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ok != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ok);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ok = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class pkgSCHeartBeatRep : pb::IMessage {
    private static readonly pb::MessageParser<pkgSCHeartBeatRep> _parser = new pb::MessageParser<pkgSCHeartBeatRep>(() => new pkgSCHeartBeatRep());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgSCHeartBeatRep> Parser { get { return _parser; } }

    /// <summary>Field number for the "itimes" field.</summary>
    public const int ItimesFieldNumber = 1;
    private int itimes_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Itimes {
      get { return itimes_; }
      set {
        itimes_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Itimes != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Itimes);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Itimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Itimes);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Itimes = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class pkgCSSynSvrClockReq : pb::IMessage {
    private static readonly pb::MessageParser<pkgCSSynSvrClockReq> _parser = new pb::MessageParser<pkgCSSynSvrClockReq>(() => new pkgCSSynSvrClockReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgCSSynSvrClockReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 1;
    private long time_;
    /// <summary>
    ///单位毫秒
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Time != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Time);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Time != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Time);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Time = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class pkgSCSynSvrClockRep : pb::IMessage {
    private static readonly pb::MessageParser<pkgSCSynSvrClockRep> _parser = new pb::MessageParser<pkgSCSynSvrClockRep>(() => new pkgSCSynSvrClockRep());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgSCSynSvrClockRep> Parser { get { return _parser; } }

    /// <summary>Field number for the "c_time" field.</summary>
    public const int CTimeFieldNumber = 1;
    private long cTime_;
    /// <summary>
    ///客户端时间戳 单位毫秒
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CTime {
      get { return cTime_; }
      set {
        cTime_ = value;
      }
    }

    /// <summary>Field number for the "s_time" field.</summary>
    public const int STimeFieldNumber = 2;
    private long sTime_;
    /// <summary>
    ///服务器端时间戳 单位毫秒
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long STime {
      get { return sTime_; }
      set {
        sTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CTime != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(CTime);
      }
      if (STime != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(STime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CTime);
      }
      if (STime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(STime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CTime = input.ReadInt64();
            break;
          }
          case 16: {
            STime = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class pkgCSARoundOverReq : pb::IMessage {
    private static readonly pb::MessageParser<pkgCSARoundOverReq> _parser = new pb::MessageParser<pkgCSARoundOverReq>(() => new pkgCSARoundOverReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgCSARoundOverReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "ok" field.</summary>
    public const int OkFieldNumber = 1;
    private int ok_;
    /// <summary>
    ///任意值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ok {
      get { return ok_; }
      set {
        ok_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ok != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ok);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ok != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ok);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ok = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class pkgSCARoundOverRep : pb::IMessage {
    private static readonly pb::MessageParser<pkgSCARoundOverRep> _parser = new pb::MessageParser<pkgSCARoundOverRep>(() => new pkgSCARoundOverRep());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgSCARoundOverRep> Parser { get { return _parser; } }

    /// <summary>Field number for the "ok" field.</summary>
    public const int OkFieldNumber = 1;
    private int ok_;
    /// <summary>
    ///任意值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ok {
      get { return ok_; }
      set {
        ok_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ok != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ok);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ok != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ok);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ok = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class pkgCSProgressRateReq : pb::IMessage {
    private static readonly pb::MessageParser<pkgCSProgressRateReq> _parser = new pb::MessageParser<pkgCSProgressRateReq>(() => new pkgCSProgressRateReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgCSProgressRateReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "rate" field.</summary>
    public const int RateFieldNumber = 1;
    private int rate_;
    /// <summary>
    ///0到100
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rate {
      get { return rate_; }
      set {
        rate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Rate != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Rate);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Rate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rate);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Rate = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class pkgSCProgressRateRep : pb::IMessage {
    private static readonly pb::MessageParser<pkgSCProgressRateRep> _parser = new pb::MessageParser<pkgSCProgressRateRep>(() => new pkgSCProgressRateRep());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgSCProgressRateRep> Parser { get { return _parser; } }

    /// <summary>Field number for the "rate" field.</summary>
    public const int RateFieldNumber = 1;
    private int rate_;
    /// <summary>
    ///0到100
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rate {
      get { return rate_; }
      set {
        rate_ = value;
      }
    }

    /// <summary>Field number for the "userid" field.</summary>
    public const int UseridFieldNumber = 2;
    private int userid_;
    /// <summary>
    ///玩家id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Userid {
      get { return userid_; }
      set {
        userid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Rate != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Rate);
      }
      if (Userid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Userid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Rate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rate);
      }
      if (Userid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Userid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Rate = input.ReadInt32();
            break;
          }
          case 16: {
            Userid = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class pkgSCGameStartRep : pb::IMessage {
    private static readonly pb::MessageParser<pkgSCGameStartRep> _parser = new pb::MessageParser<pkgSCGameStartRep>(() => new pkgSCGameStartRep());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgSCGameStartRep> Parser { get { return _parser; } }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 1;
    private long time_;
    /// <summary>
    ///单位毫秒
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Time != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Time);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Time != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Time);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Time = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class pkgCSGameDataResetReq : pb::IMessage {
    private static readonly pb::MessageParser<pkgCSGameDataResetReq> _parser = new pb::MessageParser<pkgCSGameDataResetReq>(() => new pkgCSGameDataResetReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgCSGameDataResetReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "ok" field.</summary>
    public const int OkFieldNumber = 1;
    private int ok_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ok {
      get { return ok_; }
      set {
        ok_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ok != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ok);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ok != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ok);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ok = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class pkgCSGameTimeReq : pb::IMessage {
    private static readonly pb::MessageParser<pkgCSGameTimeReq> _parser = new pb::MessageParser<pkgCSGameTimeReq>(() => new pkgCSGameTimeReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgCSGameTimeReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 1;
    private int time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Time != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Time);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Time != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Time);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Time = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class pkgSCGameTimeRep : pb::IMessage {
    private static readonly pb::MessageParser<pkgSCGameTimeRep> _parser = new pb::MessageParser<pkgSCGameTimeRep>(() => new pkgSCGameTimeRep());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgSCGameTimeRep> Parser { get { return _parser; } }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 1;
    private int time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Time != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Time);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Time != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Time);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Time = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class pkgCSPeaceReq : pb::IMessage {
    private static readonly pb::MessageParser<pkgCSPeaceReq> _parser = new pb::MessageParser<pkgCSPeaceReq>(() => new pkgCSPeaceReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgCSPeaceReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "ok" field.</summary>
    public const int OkFieldNumber = 1;
    private int ok_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ok {
      get { return ok_; }
      set {
        ok_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ok != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ok);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ok != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ok);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ok = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class pkgSCAskPeaceRep : pb::IMessage {
    private static readonly pb::MessageParser<pkgSCAskPeaceRep> _parser = new pb::MessageParser<pkgSCAskPeaceRep>(() => new pkgSCAskPeaceRep());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgSCAskPeaceRep> Parser { get { return _parser; } }

    /// <summary>Field number for the "ok" field.</summary>
    public const int OkFieldNumber = 1;
    private int ok_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ok {
      get { return ok_; }
      set {
        ok_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ok != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ok);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ok != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ok);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ok = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class pkgCSAskPeaceReq : pb::IMessage {
    private static readonly pb::MessageParser<pkgCSAskPeaceReq> _parser = new pb::MessageParser<pkgCSAskPeaceReq>(() => new pkgCSAskPeaceReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgCSAskPeaceReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "ok" field.</summary>
    public const int OkFieldNumber = 1;
    private int ok_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ok {
      get { return ok_; }
      set {
        ok_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ok != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ok);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ok != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ok);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ok = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class pkgCSAskPeaceRep : pb::IMessage {
    private static readonly pb::MessageParser<pkgCSAskPeaceRep> _parser = new pb::MessageParser<pkgCSAskPeaceRep>(() => new pkgCSAskPeaceRep());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgCSAskPeaceRep> Parser { get { return _parser; } }

    /// <summary>Field number for the "ok" field.</summary>
    public const int OkFieldNumber = 1;
    private int ok_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ok {
      get { return ok_; }
      set {
        ok_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ok != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ok);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ok != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ok);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ok = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class pkgCSSurrenderReq : pb::IMessage {
    private static readonly pb::MessageParser<pkgCSSurrenderReq> _parser = new pb::MessageParser<pkgCSSurrenderReq>(() => new pkgCSSurrenderReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgCSSurrenderReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "ok" field.</summary>
    public const int OkFieldNumber = 1;
    private int ok_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ok {
      get { return ok_; }
      set {
        ok_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ok != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ok);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ok != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ok);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ok = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class pkgCSGameOverRep : pb::IMessage {
    private static readonly pb::MessageParser<pkgCSGameOverRep> _parser = new pb::MessageParser<pkgCSGameOverRep>(() => new pkgCSGameOverRep());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgCSGameOverRep> Parser { get { return _parser; } }

    /// <summary>Field number for the "ok" field.</summary>
    public const int OkFieldNumber = 1;
    private int ok_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ok {
      get { return ok_; }
      set {
        ok_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ok != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ok);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ok != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ok);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ok = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class pkgCSPlayerPosReq : pb::IMessage {
    private static readonly pb::MessageParser<pkgCSPlayerPosReq> _parser = new pb::MessageParser<pkgCSPlayerPosReq>(() => new pkgCSPlayerPosReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgCSPlayerPosReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "posY" field.</summary>
    public const int PosYFieldNumber = 1;
    private float posY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PosY {
      get { return posY_; }
      set {
        posY_ = value;
      }
    }

    /// <summary>Field number for the "rotZ" field.</summary>
    public const int RotZFieldNumber = 2;
    private float rotZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RotZ {
      get { return rotZ_; }
      set {
        rotZ_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PosY != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(PosY);
      }
      if (RotZ != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(RotZ);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PosY != 0F) {
        size += 1 + 4;
      }
      if (RotZ != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            PosY = input.ReadFloat();
            break;
          }
          case 21: {
            RotZ = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed class pkgSCPlayerPosRep : pb::IMessage {
    private static readonly pb::MessageParser<pkgSCPlayerPosRep> _parser = new pb::MessageParser<pkgSCPlayerPosRep>(() => new pkgSCPlayerPosRep());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgSCPlayerPosRep> Parser { get { return _parser; } }

    /// <summary>Field number for the "posY" field.</summary>
    public const int PosYFieldNumber = 1;
    private float posY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PosY {
      get { return posY_; }
      set {
        posY_ = value;
      }
    }

    /// <summary>Field number for the "rotZ" field.</summary>
    public const int RotZFieldNumber = 2;
    private float rotZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RotZ {
      get { return rotZ_; }
      set {
        rotZ_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PosY != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(PosY);
      }
      if (RotZ != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(RotZ);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PosY != 0F) {
        size += 1 + 4;
      }
      if (RotZ != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            PosY = input.ReadFloat();
            break;
          }
          case 21: {
            RotZ = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed class pkgCSBlockReq : pb::IMessage {
    private static readonly pb::MessageParser<pkgCSBlockReq> _parser = new pb::MessageParser<pkgCSBlockReq>(() => new pkgCSBlockReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgCSBlockReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "ok" field.</summary>
    public const int OkFieldNumber = 1;
    private int ok_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ok {
      get { return ok_; }
      set {
        ok_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ok != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ok);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ok != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ok);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ok = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class pkgSCBlockRep : pb::IMessage {
    private static readonly pb::MessageParser<pkgSCBlockRep> _parser = new pb::MessageParser<pkgSCBlockRep>(() => new pkgSCBlockRep());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgSCBlockRep> Parser { get { return _parser; } }

    /// <summary>Field number for the "ok" field.</summary>
    public const int OkFieldNumber = 1;
    private bool ok_;
    /// <summary>
    /// false：二段 true：三段
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Ok {
      get { return ok_; }
      set {
        ok_ = value;
      }
    }

    /// <summary>Field number for the "upPos" field.</summary>
    public const int UpPosFieldNumber = 2;
    private int upPos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UpPos {
      get { return upPos_; }
      set {
        upPos_ = value;
      }
    }

    /// <summary>Field number for the "mid" field.</summary>
    public const int MidFieldNumber = 3;
    private int mid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Mid {
      get { return mid_; }
      set {
        mid_ = value;
      }
    }

    /// <summary>Field number for the "hight" field.</summary>
    public const int HightFieldNumber = 4;
    private int hight_;
    /// <summary>
    ///二段式这个参数返回：0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Hight {
      get { return hight_; }
      set {
        hight_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ok != false) {
        output.WriteRawTag(8);
        output.WriteBool(Ok);
      }
      if (UpPos != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(UpPos);
      }
      if (Mid != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Mid);
      }
      if (Hight != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Hight);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ok != false) {
        size += 1 + 1;
      }
      if (UpPos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UpPos);
      }
      if (Mid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Mid);
      }
      if (Hight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Hight);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ok = input.ReadBool();
            break;
          }
          case 16: {
            UpPos = input.ReadInt32();
            break;
          }
          case 24: {
            Mid = input.ReadInt32();
            break;
          }
          case 32: {
            Hight = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class pkgSCGameDataResetRep : pb::IMessage {
    private static readonly pb::MessageParser<pkgSCGameDataResetRep> _parser = new pb::MessageParser<pkgSCGameDataResetRep>(() => new pkgSCGameDataResetRep());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgSCGameDataResetRep> Parser { get { return _parser; } }

    /// <summary>Field number for the "blockCreateDetile" field.</summary>
    public const int BlockCreateDetileFieldNumber = 1;
    private float blockCreateDetile_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BlockCreateDetile {
      get { return blockCreateDetile_; }
      set {
        blockCreateDetile_ = value;
      }
    }

    /// <summary>Field number for the "blockMoveSpeed" field.</summary>
    public const int BlockMoveSpeedFieldNumber = 2;
    private float blockMoveSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BlockMoveSpeed {
      get { return blockMoveSpeed_; }
      set {
        blockMoveSpeed_ = value;
      }
    }

    /// <summary>Field number for the "playerUpRotSpeed" field.</summary>
    public const int PlayerUpRotSpeedFieldNumber = 3;
    private float playerUpRotSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PlayerUpRotSpeed {
      get { return playerUpRotSpeed_; }
      set {
        playerUpRotSpeed_ = value;
      }
    }

    /// <summary>Field number for the "playerDownRotSpeed" field.</summary>
    public const int PlayerDownRotSpeedFieldNumber = 4;
    private float playerDownRotSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PlayerDownRotSpeed {
      get { return playerDownRotSpeed_; }
      set {
        playerDownRotSpeed_ = value;
      }
    }

    /// <summary>Field number for the "playerUpSpeed" field.</summary>
    public const int PlayerUpSpeedFieldNumber = 5;
    private float playerUpSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PlayerUpSpeed {
      get { return playerUpSpeed_; }
      set {
        playerUpSpeed_ = value;
      }
    }

    /// <summary>Field number for the "bgRollSpeed" field.</summary>
    public const int BgRollSpeedFieldNumber = 6;
    private float bgRollSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BgRollSpeed {
      get { return bgRollSpeed_; }
      set {
        bgRollSpeed_ = value;
      }
    }

    /// <summary>Field number for the "gravityScale" field.</summary>
    public const int GravityScaleFieldNumber = 7;
    private float gravityScale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float GravityScale {
      get { return gravityScale_; }
      set {
        gravityScale_ = value;
      }
    }

    /// <summary>Field number for the "rotMax" field.</summary>
    public const int RotMaxFieldNumber = 8;
    private float rotMax_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RotMax {
      get { return rotMax_; }
      set {
        rotMax_ = value;
      }
    }

    /// <summary>Field number for the "rotMin" field.</summary>
    public const int RotMinFieldNumber = 9;
    private float rotMin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RotMin {
      get { return rotMin_; }
      set {
        rotMin_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BlockCreateDetile != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(BlockCreateDetile);
      }
      if (BlockMoveSpeed != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(BlockMoveSpeed);
      }
      if (PlayerUpRotSpeed != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(PlayerUpRotSpeed);
      }
      if (PlayerDownRotSpeed != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(PlayerDownRotSpeed);
      }
      if (PlayerUpSpeed != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(PlayerUpSpeed);
      }
      if (BgRollSpeed != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(BgRollSpeed);
      }
      if (GravityScale != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(GravityScale);
      }
      if (RotMax != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(RotMax);
      }
      if (RotMin != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(RotMin);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BlockCreateDetile != 0F) {
        size += 1 + 4;
      }
      if (BlockMoveSpeed != 0F) {
        size += 1 + 4;
      }
      if (PlayerUpRotSpeed != 0F) {
        size += 1 + 4;
      }
      if (PlayerDownRotSpeed != 0F) {
        size += 1 + 4;
      }
      if (PlayerUpSpeed != 0F) {
        size += 1 + 4;
      }
      if (BgRollSpeed != 0F) {
        size += 1 + 4;
      }
      if (GravityScale != 0F) {
        size += 1 + 4;
      }
      if (RotMax != 0F) {
        size += 1 + 4;
      }
      if (RotMin != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            BlockCreateDetile = input.ReadFloat();
            break;
          }
          case 21: {
            BlockMoveSpeed = input.ReadFloat();
            break;
          }
          case 29: {
            PlayerUpRotSpeed = input.ReadFloat();
            break;
          }
          case 37: {
            PlayerDownRotSpeed = input.ReadFloat();
            break;
          }
          case 45: {
            PlayerUpSpeed = input.ReadFloat();
            break;
          }
          case 53: {
            BgRollSpeed = input.ReadFloat();
            break;
          }
          case 61: {
            GravityScale = input.ReadFloat();
            break;
          }
          case 69: {
            RotMax = input.ReadFloat();
            break;
          }
          case 77: {
            RotMin = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
