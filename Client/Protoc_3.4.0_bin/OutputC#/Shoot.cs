// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Shoot.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Protocol {

  #region Enums
  public enum ProtocolCmd {
    None = 0,
    /// <summary>
    ///===通用
    /// </summary>
    CslogOutReq = 1003,
    /// <summary>
    ///退出
    /// </summary>
    SclogOutRep = 1004,
    /// <summary>
    ///心跳协议请求
    /// </summary>
    CsheartBeatReq = 1010,
    /// <summary>
    ///心跳协议请求
    /// </summary>
    ScheartBeatRep = 1011,
    /// <summary>
    ///一盘游戏结束
    /// </summary>
    CsaroundOverReq = 1012,
    /// <summary>
    ///一盘游戏结束
    /// </summary>
    ScaroundOverRep = 1013,
    /// <summary>
    ///请求加入房间
    /// </summary>
    CsjoinRoomReq = 1016,
    /// <summary>
    ///请求加入房间
    /// </summary>
    ScjoinRoomRep = 1017,
    /// <summary>
    ///加载进度
    /// </summary>
    CsprogressRateReq = 1021,
    /// <summary>
    ///加载进度
    /// </summary>
    ScprogressRateRep = 1022,
    /// <summary>
    ///游戏开始
    /// </summary>
    ScgameStartRep = 1023,
    /// <summary>
    ///上传坚持时间
    /// </summary>
    CsgameTimeReq = 1031,
    /// <summary>
    ///游戏结果
    /// </summary>
    ScgameOverRep = 1032,
    /// <summary>
    ///用户输入
    /// </summary>
    CsuuserInputReq = 1033,
    /// <summary>
    ///当前世界状态
    /// </summary>
    SccurrentWorldStateRep = 1038,
    /// <summary>
    ///检测碰撞
    /// </summary>
    SccheckCollider = 1042,
    /// <summary>
    ///获取服务器时间
    /// </summary>
    CsgetServerLocalTimeReq = 1101,
    /// <summary>
    ///获取服务器时间返回
    /// </summary>
    ScgetServerLocalTimeRep = 1102,
    /// <summary>
    ///获取游戏提示
    /// </summary>
    CsgetTipsContentReq = 1080,
    /// <summary>
    ///获取游戏提示	
    /// </summary>
    ScgetTipsContentRep = 1081,
    /// <summary>
    ///获取客户端状态
    /// </summary>
    ScgclientNetkStatusRep = 1053,
    /// <summary>
    ///推送网络状态请求
    /// </summary>
    CspushClientNetStatusReq = 1054,
    /// <summary>
    ///=========
    /// </summary>
    CsgameConfigReq = 1051,
    /// <summary>
    ///返回游戏配置
    /// </summary>
    ScgameConfigRep = 1052,
    /// <summary>
    ///切换弹夹
    /// </summary>
    ScinAcartridgeRep = 1061,
    /// <summary>
    ///产生子弹buff
    /// </summary>
    SccreateBombBuffRep = 1071,
    /// <summary>
    ///倒数通知
    /// </summary>
    ScnextDaoshuNoticeRep = 1082,
    /// <summary>
    ///玩家位置转发
    /// </summary>
    CsplayerPsTransmitReq = 1091,
    /// <summary>
    ///玩家位置转发
    /// </summary>
    ScplayerPsTransmitRep = 1092,
  }

  public enum ERROCODE {
    None = 0,
    Successful = 1,
  }

  public enum COLLIDER_TYPE {
    /// <summary>
    ///(other_id/1000) 表示类别 1表示玩家 2表示地面 3飞行的炸弹 4飞行的三角形弹 5挡板障碍物 (other_id%1000)表示具体的id
    /// </summary>
    None = 0,
    /// <summary>
    ///玩家
    /// </summary>
    ColliderPlayer = 1,
    /// <summary>
    ///地面
    /// </summary>
    ColliderDimian = 2,
    /// <summary>
    ///飞行的炸弹buff
    /// </summary>
    ColliderBomba = 3,
    /// <summary>
    ///飞行的三角形buff
    /// </summary>
    ColliderSanjiao = 4,
    /// <summary>
    ///飞行的挡板
    /// </summary>
    ColliderDangban = 5,
    /// <summary>
    ///纵向的导弹
    /// </summary>
    ColliderLgtMissile = 6,
    /// <summary>
    ///纵向的散弹
    /// </summary>
    ColliderLgtShotgun = 7,
    /// <summary>
    ///普通的子弹
    /// </summary>
    ColliderNormalBullet = 8,
  }

  #endregion

  #region Messages
  /// <summary>
  ///===通用
  /// </summary>
  public sealed class pkgCSJoinRoomReq : pb::IMessage {
    private static readonly pb::MessageParser<pkgCSJoinRoomReq> _parser = new pb::MessageParser<pkgCSJoinRoomReq>(() => new pkgCSJoinRoomReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgCSJoinRoomReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "iroomid" field.</summary>
    public const int IroomidFieldNumber = 1;
    private long iroomid_;
    /// <summary>
    ///房间号 玩家id在消息头种赋值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Iroomid {
      get { return iroomid_; }
      set {
        iroomid_ = value;
      }
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 2;
    private int userId_;
    /// <summary>
    ///玩家id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 3;
    private string token_ = "";
    /// <summary>
    ///玩家toten
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Iroomid != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Iroomid);
      }
      if (UserId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(UserId);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Token);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Iroomid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Iroomid);
      }
      if (UserId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserId);
      }
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Iroomid = input.ReadInt64();
            break;
          }
          case 16: {
            UserId = input.ReadInt32();
            break;
          }
          case 26: {
            Token = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed class pkgSCJoinRoomRep : pb::IMessage {
    private static readonly pb::MessageParser<pkgSCJoinRoomRep> _parser = new pb::MessageParser<pkgSCJoinRoomRep>(() => new pkgSCJoinRoomRep());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgSCJoinRoomRep> Parser { get { return _parser; } }

    /// <summary>Field number for the "ok" field.</summary>
    public const int OkFieldNumber = 1;
    private int ok_;
    /// <summary>
    ///1成功 0失败
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ok {
      get { return ok_; }
      set {
        ok_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ok != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ok);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ok != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ok);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ok = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class pkgCSProgressRateReq : pb::IMessage {
    private static readonly pb::MessageParser<pkgCSProgressRateReq> _parser = new pb::MessageParser<pkgCSProgressRateReq>(() => new pkgCSProgressRateReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgCSProgressRateReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "rate" field.</summary>
    public const int RateFieldNumber = 1;
    private int rate_;
    /// <summary>
    ///0到100
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rate {
      get { return rate_; }
      set {
        rate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Rate != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Rate);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Rate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rate);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Rate = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class pkgSCProgressRateRep : pb::IMessage {
    private static readonly pb::MessageParser<pkgSCProgressRateRep> _parser = new pb::MessageParser<pkgSCProgressRateRep>(() => new pkgSCProgressRateRep());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgSCProgressRateRep> Parser { get { return _parser; } }

    /// <summary>Field number for the "rate" field.</summary>
    public const int RateFieldNumber = 1;
    private int rate_;
    /// <summary>
    ///0到100
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rate {
      get { return rate_; }
      set {
        rate_ = value;
      }
    }

    /// <summary>Field number for the "userid" field.</summary>
    public const int UseridFieldNumber = 2;
    private int userid_;
    /// <summary>
    ///玩家id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Userid {
      get { return userid_; }
      set {
        userid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Rate != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Rate);
      }
      if (Userid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Userid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Rate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rate);
      }
      if (Userid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Userid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Rate = input.ReadInt32();
            break;
          }
          case 16: {
            Userid = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class pkgSCGameStartRep : pb::IMessage {
    private static readonly pb::MessageParser<pkgSCGameStartRep> _parser = new pb::MessageParser<pkgSCGameStartRep>(() => new pkgSCGameStartRep());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgSCGameStartRep> Parser { get { return _parser; } }

    /// <summary>Field number for the "ok" field.</summary>
    public const int OkFieldNumber = 1;
    private int ok_;
    /// <summary>
    ///任意值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ok {
      get { return ok_; }
      set {
        ok_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ok != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ok);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ok != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ok);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ok = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class pkgCSGameTimeReq : pb::IMessage {
    private static readonly pb::MessageParser<pkgCSGameTimeReq> _parser = new pb::MessageParser<pkgCSGameTimeReq>(() => new pkgCSGameTimeReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgCSGameTimeReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 1;
    private int time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Time != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Time);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Time != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Time);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Time = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class pkgSCGameOverRep : pb::IMessage {
    private static readonly pb::MessageParser<pkgSCGameOverRep> _parser = new pb::MessageParser<pkgSCGameOverRep>(() => new pkgSCGameOverRep());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgSCGameOverRep> Parser { get { return _parser; } }

    /// <summary>Field number for the "ok" field.</summary>
    public const int OkFieldNumber = 1;
    private int ok_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ok {
      get { return ok_; }
      set {
        ok_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ok != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ok);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ok != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ok);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ok = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class pkgCSLogOutReq : pb::IMessage {
    private static readonly pb::MessageParser<pkgCSLogOutReq> _parser = new pb::MessageParser<pkgCSLogOutReq>(() => new pkgCSLogOutReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgCSLogOutReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "ok" field.</summary>
    public const int OkFieldNumber = 1;
    private int ok_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ok {
      get { return ok_; }
      set {
        ok_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ok != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ok);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ok != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ok);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ok = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class pkgSCLogOutRep : pb::IMessage {
    private static readonly pb::MessageParser<pkgSCLogOutRep> _parser = new pb::MessageParser<pkgSCLogOutRep>(() => new pkgSCLogOutRep());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgSCLogOutRep> Parser { get { return _parser; } }

    /// <summary>Field number for the "ok" field.</summary>
    public const int OkFieldNumber = 1;
    private int ok_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ok {
      get { return ok_; }
      set {
        ok_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ok != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ok);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ok != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ok);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ok = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class pkgCSHeartBeatReq : pb::IMessage {
    private static readonly pb::MessageParser<pkgCSHeartBeatReq> _parser = new pb::MessageParser<pkgCSHeartBeatReq>(() => new pkgCSHeartBeatReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgCSHeartBeatReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "ok" field.</summary>
    public const int OkFieldNumber = 1;
    private int ok_;
    /// <summary>
    ///任意值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ok {
      get { return ok_; }
      set {
        ok_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ok != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ok);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ok != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ok);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ok = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class pkgSCHeartBeatRep : pb::IMessage {
    private static readonly pb::MessageParser<pkgSCHeartBeatRep> _parser = new pb::MessageParser<pkgSCHeartBeatRep>(() => new pkgSCHeartBeatRep());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgSCHeartBeatRep> Parser { get { return _parser; } }

    /// <summary>Field number for the "itimes" field.</summary>
    public const int ItimesFieldNumber = 1;
    private int itimes_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Itimes {
      get { return itimes_; }
      set {
        itimes_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Itimes != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Itimes);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Itimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Itimes);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Itimes = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class pkgCSARoundOverReq : pb::IMessage {
    private static readonly pb::MessageParser<pkgCSARoundOverReq> _parser = new pb::MessageParser<pkgCSARoundOverReq>(() => new pkgCSARoundOverReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgCSARoundOverReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "ok" field.</summary>
    public const int OkFieldNumber = 1;
    private int ok_;
    /// <summary>
    ///任意值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ok {
      get { return ok_; }
      set {
        ok_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ok != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ok);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ok != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ok);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ok = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class pkgSCARoundOverRep : pb::IMessage {
    private static readonly pb::MessageParser<pkgSCARoundOverRep> _parser = new pb::MessageParser<pkgSCARoundOverRep>(() => new pkgSCARoundOverRep());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgSCARoundOverRep> Parser { get { return _parser; } }

    /// <summary>Field number for the "ok" field.</summary>
    public const int OkFieldNumber = 1;
    private int ok_;
    /// <summary>
    ///任意值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ok {
      get { return ok_; }
      set {
        ok_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ok != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ok);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ok != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ok);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ok = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class pkgCSGetTipsContentReq : pb::IMessage {
    private static readonly pb::MessageParser<pkgCSGetTipsContentReq> _parser = new pb::MessageParser<pkgCSGetTipsContentReq>(() => new pkgCSGetTipsContentReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgCSGetTipsContentReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "req" field.</summary>
    public const int ReqFieldNumber = 1;
    private int req_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Req {
      get { return req_; }
      set {
        req_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Req != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Req);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Req != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Req);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Req = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class pkgSCGetTipsContentRep : pb::IMessage {
    private static readonly pb::MessageParser<pkgSCGetTipsContentRep> _parser = new pb::MessageParser<pkgSCGetTipsContentRep>(() => new pkgSCGetTipsContentRep());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgSCGetTipsContentRep> Parser { get { return _parser; } }

    /// <summary>Field number for the "tips" field.</summary>
    public const int TipsFieldNumber = 1;
    private string tips_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Tips {
      get { return tips_; }
      set {
        tips_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Tips.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Tips);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Tips.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Tips);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Tips = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed class pkgSCGClientNetkStatusRep : pb::IMessage {
    private static readonly pb::MessageParser<pkgSCGClientNetkStatusRep> _parser = new pb::MessageParser<pkgSCGClientNetkStatusRep>(() => new pkgSCGClientNetkStatusRep());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgSCGClientNetkStatusRep> Parser { get { return _parser; } }

    /// <summary>Field number for the "network_status" field.</summary>
    public const int NetworkStatusFieldNumber = 1;
    private int networkStatus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NetworkStatus {
      get { return networkStatus_; }
      set {
        networkStatus_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NetworkStatus != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(NetworkStatus);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NetworkStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NetworkStatus);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            NetworkStatus = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class pkgCSPushClientNetStatusReq : pb::IMessage {
    private static readonly pb::MessageParser<pkgCSPushClientNetStatusReq> _parser = new pb::MessageParser<pkgCSPushClientNetStatusReq>(() => new pkgCSPushClientNetStatusReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgCSPushClientNetStatusReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "network_status" field.</summary>
    public const int NetworkStatusFieldNumber = 1;
    private int networkStatus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NetworkStatus {
      get { return networkStatus_; }
      set {
        networkStatus_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NetworkStatus != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(NetworkStatus);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NetworkStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NetworkStatus);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            NetworkStatus = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///====狂暴射击
  /// </summary>
  public sealed class UserInput : pb::IMessage {
    private static readonly pb::MessageParser<UserInput> _parser = new pb::MessageParser<UserInput>(() => new UserInput());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserInput> Parser { get { return _parser; } }

    /// <summary>Field number for the "entity_id" field.</summary>
    public const int EntityIdFieldNumber = 1;
    private int entityId_;
    /// <summary>
    ///玩家id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EntityId {
      get { return entityId_; }
      set {
        entityId_ = value;
      }
    }

    /// <summary>Field number for the "shoot" field.</summary>
    public const int ShootFieldNumber = 2;
    private int shoot_;
    /// <summary>
    ///射击
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Shoot {
      get { return shoot_; }
      set {
        shoot_ = value;
      }
    }

    /// <summary>Field number for the "defense" field.</summary>
    public const int DefenseFieldNumber = 3;
    private int defense_;
    /// <summary>
    ///挡板
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Defense {
      get { return defense_; }
      set {
        defense_ = value;
      }
    }

    /// <summary>Field number for the "bullet_collider" field.</summary>
    public const int BulletColliderFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Protocol.collider> _repeated_bulletCollider_codec
        = pb::FieldCodec.ForMessage(34, global::Protocol.collider.Parser);
    private readonly pbc::RepeatedField<global::Protocol.collider> bulletCollider_ = new pbc::RepeatedField<global::Protocol.collider>();
    /// <summary>
    ///碰撞检测（2个对象是否碰撞）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.collider> BulletCollider {
      get { return bulletCollider_; }
    }

    /// <summary>Field number for the "client_time" field.</summary>
    public const int ClientTimeFieldNumber = 5;
    private long clientTime_;
    /// <summary>
    ///客户端时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ClientTime {
      get { return clientTime_; }
      set {
        clientTime_ = value;
      }
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 6;
    private int x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EntityId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(EntityId);
      }
      if (Shoot != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Shoot);
      }
      if (Defense != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Defense);
      }
      bulletCollider_.WriteTo(output, _repeated_bulletCollider_codec);
      if (ClientTime != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(ClientTime);
      }
      if (X != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(X);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EntityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EntityId);
      }
      if (Shoot != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Shoot);
      }
      if (Defense != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Defense);
      }
      size += bulletCollider_.CalculateSize(_repeated_bulletCollider_codec);
      if (ClientTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ClientTime);
      }
      if (X != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            EntityId = input.ReadInt32();
            break;
          }
          case 16: {
            Shoot = input.ReadInt32();
            break;
          }
          case 24: {
            Defense = input.ReadInt32();
            break;
          }
          case 34: {
            bulletCollider_.AddEntriesFrom(input, _repeated_bulletCollider_codec);
            break;
          }
          case 40: {
            ClientTime = input.ReadInt64();
            break;
          }
          case 48: {
            X = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class pkgCSUuserInputReq : pb::IMessage {
    private static readonly pb::MessageParser<pkgCSUuserInputReq> _parser = new pb::MessageParser<pkgCSUuserInputReq>(() => new pkgCSUuserInputReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgCSUuserInputReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "user_input" field.</summary>
    public const int UserInputFieldNumber = 1;
    private global::Protocol.UserInput userInput_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.UserInput UserInput {
      get { return userInput_; }
      set {
        userInput_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (userInput_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(UserInput);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (userInput_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserInput);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (userInput_ == null) {
              userInput_ = new global::Protocol.UserInput();
            }
            input.ReadMessage(userInput_);
            break;
          }
        }
      }
    }

  }

  public sealed class collider : pb::IMessage {
    private static readonly pb::MessageParser<collider> _parser = new pb::MessageParser<collider>(() => new collider());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<collider> Parser { get { return _parser; } }

    /// <summary>Field number for the "bullet_id" field.</summary>
    public const int BulletIdFieldNumber = 1;
    private int bulletId_;
    /// <summary>
    ///子弹id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BulletId {
      get { return bulletId_; }
      set {
        bulletId_ = value;
      }
    }

    /// <summary>Field number for the "other_id" field.</summary>
    public const int OtherIdFieldNumber = 2;
    private int otherId_;
    /// <summary>
    ///(other_id/1000) 表示类别 1表示玩家 2表示地面 3飞行的炸弹 4飞行的三角形弹 5player1挡板障碍物 6纵向的导弹 7纵向的散弹 8普通子弹 (other_id%1000)表示具体的id 9player2挡板障碍物
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OtherId {
      get { return otherId_; }
      set {
        otherId_ = value;
      }
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 3;
    private int x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "collider_time" field.</summary>
    public const int ColliderTimeFieldNumber = 4;
    private long colliderTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ColliderTime {
      get { return colliderTime_; }
      set {
        colliderTime_ = value;
      }
    }

    /// <summary>Field number for the "bullet_state" field.</summary>
    public const int BulletStateFieldNumber = 5;
    private int bulletState_;
    /// <summary>
    ///子弹状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BulletState {
      get { return bulletState_; }
      set {
        bulletState_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BulletId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BulletId);
      }
      if (OtherId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(OtherId);
      }
      if (X != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(X);
      }
      if (ColliderTime != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(ColliderTime);
      }
      if (BulletState != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(BulletState);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BulletId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BulletId);
      }
      if (OtherId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OtherId);
      }
      if (X != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
      }
      if (ColliderTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ColliderTime);
      }
      if (BulletState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BulletState);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BulletId = input.ReadInt32();
            break;
          }
          case 16: {
            OtherId = input.ReadInt32();
            break;
          }
          case 24: {
            X = input.ReadInt32();
            break;
          }
          case 32: {
            ColliderTime = input.ReadInt64();
            break;
          }
          case 40: {
            BulletState = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CheckColliderOk : pb::IMessage {
    private static readonly pb::MessageParser<CheckColliderOk> _parser = new pb::MessageParser<CheckColliderOk>(() => new CheckColliderOk());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CheckColliderOk> Parser { get { return _parser; } }

    /// <summary>Field number for the "ok" field.</summary>
    public const int OkFieldNumber = 1;
    private int ok_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ok {
      get { return ok_; }
      set {
        ok_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ok != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ok);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ok != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ok);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ok = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class UserInputs : pb::IMessage {
    private static readonly pb::MessageParser<UserInputs> _parser = new pb::MessageParser<UserInputs>(() => new UserInputs());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserInputs> Parser { get { return _parser; } }

    /// <summary>Field number for the "user_input" field.</summary>
    public const int UserInputFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Protocol.UserInput> _repeated_userInput_codec
        = pb::FieldCodec.ForMessage(10, global::Protocol.UserInput.Parser);
    private readonly pbc::RepeatedField<global::Protocol.UserInput> userInput_ = new pbc::RepeatedField<global::Protocol.UserInput>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.UserInput> UserInput {
      get { return userInput_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      userInput_.WriteTo(output, _repeated_userInput_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += userInput_.CalculateSize(_repeated_userInput_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            userInput_.AddEntriesFrom(input, _repeated_userInput_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class EntityData : pb::IMessage {
    private static readonly pb::MessageParser<EntityData> _parser = new pb::MessageParser<EntityData>(() => new EntityData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EntityData> Parser { get { return _parser; } }

    /// <summary>Field number for the "entity_id" field.</summary>
    public const int EntityIdFieldNumber = 1;
    private int entityId_;
    /// <summary>
    ///玩家id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EntityId {
      get { return entityId_; }
      set {
        entityId_ = value;
      }
    }

    /// <summary>Field number for the "hp" field.</summary>
    public const int HpFieldNumber = 2;
    private int hp_;
    /// <summary>
    ///玩家血量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Hp {
      get { return hp_; }
      set {
        hp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EntityId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(EntityId);
      }
      if (Hp != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Hp);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EntityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EntityId);
      }
      if (Hp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Hp);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            EntityId = input.ReadInt32();
            break;
          }
          case 16: {
            Hp = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class BombData : pb::IMessage {
    private static readonly pb::MessageParser<BombData> _parser = new pb::MessageParser<BombData>(() => new BombData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BombData> Parser { get { return _parser; } }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "entity_id" field.</summary>
    public const int EntityIdFieldNumber = 2;
    private int entityId_;
    /// <summary>
    ///有值表示玩家id 0表示服务端产生的	
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EntityId {
      get { return entityId_; }
      set {
        entityId_ = value;
      }
    }

    /// <summary>Field number for the "bullet_state" field.</summary>
    public const int BulletStateFieldNumber = 3;
    private int bulletState_;
    /// <summary>
    ///子弹状态	
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BulletState {
      get { return bulletState_; }
      set {
        bulletState_ = value;
      }
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 4;
    private int x_;
    /// <summary>
    ///x坐标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 5;
    private int y_;
    /// <summary>
    ///y坐标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "hp" field.</summary>
    public const int HpFieldNumber = 6;
    private int hp_;
    /// <summary>
    ///血量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Hp {
      get { return hp_; }
      set {
        hp_ = value;
      }
    }

    /// <summary>Field number for the "client_time" field.</summary>
    public const int ClientTimeFieldNumber = 7;
    private long clientTime_;
    /// <summary>
    ///客户端时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ClientTime {
      get { return clientTime_; }
      set {
        clientTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (EntityId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(EntityId);
      }
      if (BulletState != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BulletState);
      }
      if (X != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(X);
      }
      if (Y != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Y);
      }
      if (Hp != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Hp);
      }
      if (ClientTime != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(ClientTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (EntityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EntityId);
      }
      if (BulletState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BulletState);
      }
      if (X != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
      }
      if (Y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Y);
      }
      if (Hp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Hp);
      }
      if (ClientTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ClientTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            EntityId = input.ReadInt32();
            break;
          }
          case 24: {
            BulletState = input.ReadInt32();
            break;
          }
          case 32: {
            X = input.ReadInt32();
            break;
          }
          case 40: {
            Y = input.ReadInt32();
            break;
          }
          case 48: {
            Hp = input.ReadInt32();
            break;
          }
          case 56: {
            ClientTime = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class WorlData : pb::IMessage {
    private static readonly pb::MessageParser<WorlData> _parser = new pb::MessageParser<WorlData>(() => new WorlData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WorlData> Parser { get { return _parser; } }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 1;
    private int index_;
    /// <summary>
    ///服务器帧序列号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "entityDatas" field.</summary>
    public const int EntityDatasFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Protocol.EntityData> _repeated_entityDatas_codec
        = pb::FieldCodec.ForMessage(18, global::Protocol.EntityData.Parser);
    private readonly pbc::RepeatedField<global::Protocol.EntityData> entityDatas_ = new pbc::RepeatedField<global::Protocol.EntityData>();
    /// <summary>
    ///2个玩家的状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.EntityData> EntityDatas {
      get { return entityDatas_; }
    }

    /// <summary>Field number for the "bomeDatas" field.</summary>
    public const int BomeDatasFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Protocol.BombData> _repeated_bomeDatas_codec
        = pb::FieldCodec.ForMessage(26, global::Protocol.BombData.Parser);
    private readonly pbc::RepeatedField<global::Protocol.BombData> bomeDatas_ = new pbc::RepeatedField<global::Protocol.BombData>();
    /// <summary>
    ///服务端创建的子弹buff
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.BombData> BomeDatas {
      get { return bomeDatas_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
      entityDatas_.WriteTo(output, _repeated_entityDatas_codec);
      bomeDatas_.WriteTo(output, _repeated_bomeDatas_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      size += entityDatas_.CalculateSize(_repeated_entityDatas_codec);
      size += bomeDatas_.CalculateSize(_repeated_bomeDatas_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
          case 18: {
            entityDatas_.AddEntriesFrom(input, _repeated_entityDatas_codec);
            break;
          }
          case 26: {
            bomeDatas_.AddEntriesFrom(input, _repeated_bomeDatas_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class pkgSCCurrentWorldStateRep : pb::IMessage {
    private static readonly pb::MessageParser<pkgSCCurrentWorldStateRep> _parser = new pb::MessageParser<pkgSCCurrentWorldStateRep>(() => new pkgSCCurrentWorldStateRep());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgSCCurrentWorldStateRep> Parser { get { return _parser; } }

    /// <summary>Field number for the "world_data" field.</summary>
    public const int WorldDataFieldNumber = 1;
    private global::Protocol.WorlData worldData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.WorlData WorldData {
      get { return worldData_; }
      set {
        worldData_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (worldData_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(WorldData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (worldData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WorldData);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (worldData_ == null) {
              worldData_ = new global::Protocol.WorlData();
            }
            input.ReadMessage(worldData_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///游戏配置
  /// </summary>
  public sealed class pkgCSGameConfigReq : pb::IMessage {
    private static readonly pb::MessageParser<pkgCSGameConfigReq> _parser = new pb::MessageParser<pkgCSGameConfigReq>(() => new pkgCSGameConfigReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgCSGameConfigReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///游戏配置
  /// </summary>
  public sealed class pkgSCGameConfigRep : pb::IMessage {
    private static readonly pb::MessageParser<pkgSCGameConfigRep> _parser = new pb::MessageParser<pkgSCGameConfigRep>(() => new pkgSCGameConfigRep());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgSCGameConfigRep> Parser { get { return _parser; } }

    /// <summary>Field number for the "Player1X" field.</summary>
    public const int Player1XFieldNumber = 1;
    private int player1X_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Player1X {
      get { return player1X_; }
      set {
        player1X_ = value;
      }
    }

    /// <summary>Field number for the "Player1Y" field.</summary>
    public const int Player1YFieldNumber = 2;
    private int player1Y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Player1Y {
      get { return player1Y_; }
      set {
        player1Y_ = value;
      }
    }

    /// <summary>Field number for the "Player1Speed" field.</summary>
    public const int Player1SpeedFieldNumber = 3;
    private int player1Speed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Player1Speed {
      get { return player1Speed_; }
      set {
        player1Speed_ = value;
      }
    }

    /// <summary>Field number for the "Player1ScaleY" field.</summary>
    public const int Player1ScaleYFieldNumber = 4;
    private int player1ScaleY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Player1ScaleY {
      get { return player1ScaleY_; }
      set {
        player1ScaleY_ = value;
      }
    }

    /// <summary>Field number for the "Player1EntityId" field.</summary>
    public const int Player1EntityIdFieldNumber = 5;
    private int player1EntityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Player1EntityId {
      get { return player1EntityId_; }
      set {
        player1EntityId_ = value;
      }
    }

    /// <summary>Field number for the "Player2X" field.</summary>
    public const int Player2XFieldNumber = 6;
    private int player2X_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Player2X {
      get { return player2X_; }
      set {
        player2X_ = value;
      }
    }

    /// <summary>Field number for the "Player2Y" field.</summary>
    public const int Player2YFieldNumber = 7;
    private int player2Y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Player2Y {
      get { return player2Y_; }
      set {
        player2Y_ = value;
      }
    }

    /// <summary>Field number for the "Player2Speed" field.</summary>
    public const int Player2SpeedFieldNumber = 8;
    private int player2Speed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Player2Speed {
      get { return player2Speed_; }
      set {
        player2Speed_ = value;
      }
    }

    /// <summary>Field number for the "Player2ScaleY" field.</summary>
    public const int Player2ScaleYFieldNumber = 9;
    private int player2ScaleY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Player2ScaleY {
      get { return player2ScaleY_; }
      set {
        player2ScaleY_ = value;
      }
    }

    /// <summary>Field number for the "Player2EntityId" field.</summary>
    public const int Player2EntityIdFieldNumber = 10;
    private int player2EntityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Player2EntityId {
      get { return player2EntityId_; }
      set {
        player2EntityId_ = value;
      }
    }

    /// <summary>Field number for the "ServerUpdateRate" field.</summary>
    public const int ServerUpdateRateFieldNumber = 11;
    private int serverUpdateRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ServerUpdateRate {
      get { return serverUpdateRate_; }
      set {
        serverUpdateRate_ = value;
      }
    }

    /// <summary>Field number for the "BombSpeedLR" field.</summary>
    public const int BombSpeedLRFieldNumber = 12;
    private int bombSpeedLR_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BombSpeedLR {
      get { return bombSpeedLR_; }
      set {
        bombSpeedLR_ = value;
      }
    }

    /// <summary>Field number for the "MessSpeedLR" field.</summary>
    public const int MessSpeedLRFieldNumber = 13;
    private int messSpeedLR_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MessSpeedLR {
      get { return messSpeedLR_; }
      set {
        messSpeedLR_ = value;
      }
    }

    /// <summary>Field number for the "BombSpeed" field.</summary>
    public const int BombSpeedFieldNumber = 14;
    private int bombSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BombSpeed {
      get { return bombSpeed_; }
      set {
        bombSpeed_ = value;
      }
    }

    /// <summary>Field number for the "MessSpeed" field.</summary>
    public const int MessSpeedFieldNumber = 15;
    private int messSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MessSpeed {
      get { return messSpeed_; }
      set {
        messSpeed_ = value;
      }
    }

    /// <summary>Field number for the "NormalSpeed" field.</summary>
    public const int NormalSpeedFieldNumber = 16;
    private int normalSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NormalSpeed {
      get { return normalSpeed_; }
      set {
        normalSpeed_ = value;
      }
    }

    /// <summary>Field number for the "ShootSpeed" field.</summary>
    public const int ShootSpeedFieldNumber = 17;
    private int shootSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ShootSpeed {
      get { return shootSpeed_; }
      set {
        shootSpeed_ = value;
      }
    }

    /// <summary>Field number for the "BombDamage" field.</summary>
    public const int BombDamageFieldNumber = 18;
    private int bombDamage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BombDamage {
      get { return bombDamage_; }
      set {
        bombDamage_ = value;
      }
    }

    /// <summary>Field number for the "MessDamage" field.</summary>
    public const int MessDamageFieldNumber = 19;
    private int messDamage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MessDamage {
      get { return messDamage_; }
      set {
        messDamage_ = value;
      }
    }

    /// <summary>Field number for the "Normaldamage" field.</summary>
    public const int NormaldamageFieldNumber = 20;
    private int normaldamage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Normaldamage {
      get { return normaldamage_; }
      set {
        normaldamage_ = value;
      }
    }

    /// <summary>Field number for the "BrickHp" field.</summary>
    public const int BrickHpFieldNumber = 21;
    private int brickHp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BrickHp {
      get { return brickHp_; }
      set {
        brickHp_ = value;
      }
    }

    /// <summary>Field number for the "AmmoNum" field.</summary>
    public const int AmmoNumFieldNumber = 22;
    private int ammoNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AmmoNum {
      get { return ammoNum_; }
      set {
        ammoNum_ = value;
      }
    }

    /// <summary>Field number for the "ReloadTime" field.</summary>
    public const int ReloadTimeFieldNumber = 23;
    private int reloadTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReloadTime {
      get { return reloadTime_; }
      set {
        reloadTime_ = value;
      }
    }

    /// <summary>Field number for the "BaffleSpacing" field.</summary>
    public const int BaffleSpacingFieldNumber = 24;
    private int baffleSpacing_;
    /// <summary>
    ///挡板间距 （与人）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BaffleSpacing {
      get { return baffleSpacing_; }
      set {
        baffleSpacing_ = value;
      }
    }

    /// <summary>Field number for the "BulletSpacing" field.</summary>
    public const int BulletSpacingFieldNumber = 25;
    private int bulletSpacing_;
    /// <summary>
    ///子弹间距（与人）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BulletSpacing {
      get { return bulletSpacing_; }
      set {
        bulletSpacing_ = value;
      }
    }

    /// <summary>Field number for the "ScreenHeight" field.</summary>
    public const int ScreenHeightFieldNumber = 26;
    private int screenHeight_;
    /// <summary>
    ///屏幕高度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ScreenHeight {
      get { return screenHeight_; }
      set {
        screenHeight_ = value;
      }
    }

    /// <summary>Field number for the "MessSpeedLRD" field.</summary>
    public const int MessSpeedLRDFieldNumber = 27;
    private int messSpeedLRD_;
    /// <summary>
    ///水平速度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MessSpeedLRD {
      get { return messSpeedLRD_; }
      set {
        messSpeedLRD_ = value;
      }
    }

    /// <summary>Field number for the "MaxBrick" field.</summary>
    public const int MaxBrickFieldNumber = 28;
    private int maxBrick_;
    /// <summary>
    ///一局种能使用的砖块次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxBrick {
      get { return maxBrick_; }
      set {
        maxBrick_ = value;
      }
    }

    /// <summary>Field number for the "ClientUpdateRate" field.</summary>
    public const int ClientUpdateRateFieldNumber = 29;
    private int clientUpdateRate_;
    /// <summary>
    ///客户端一秒更新多少帧
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ClientUpdateRate {
      get { return clientUpdateRate_; }
      set {
        clientUpdateRate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Player1X != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Player1X);
      }
      if (Player1Y != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Player1Y);
      }
      if (Player1Speed != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Player1Speed);
      }
      if (Player1ScaleY != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Player1ScaleY);
      }
      if (Player1EntityId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Player1EntityId);
      }
      if (Player2X != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Player2X);
      }
      if (Player2Y != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Player2Y);
      }
      if (Player2Speed != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Player2Speed);
      }
      if (Player2ScaleY != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Player2ScaleY);
      }
      if (Player2EntityId != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Player2EntityId);
      }
      if (ServerUpdateRate != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(ServerUpdateRate);
      }
      if (BombSpeedLR != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(BombSpeedLR);
      }
      if (MessSpeedLR != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(MessSpeedLR);
      }
      if (BombSpeed != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(BombSpeed);
      }
      if (MessSpeed != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(MessSpeed);
      }
      if (NormalSpeed != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(NormalSpeed);
      }
      if (ShootSpeed != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(ShootSpeed);
      }
      if (BombDamage != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(BombDamage);
      }
      if (MessDamage != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(MessDamage);
      }
      if (Normaldamage != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(Normaldamage);
      }
      if (BrickHp != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(BrickHp);
      }
      if (AmmoNum != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(AmmoNum);
      }
      if (ReloadTime != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(ReloadTime);
      }
      if (BaffleSpacing != 0) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(BaffleSpacing);
      }
      if (BulletSpacing != 0) {
        output.WriteRawTag(200, 1);
        output.WriteInt32(BulletSpacing);
      }
      if (ScreenHeight != 0) {
        output.WriteRawTag(208, 1);
        output.WriteInt32(ScreenHeight);
      }
      if (MessSpeedLRD != 0) {
        output.WriteRawTag(216, 1);
        output.WriteInt32(MessSpeedLRD);
      }
      if (MaxBrick != 0) {
        output.WriteRawTag(224, 1);
        output.WriteInt32(MaxBrick);
      }
      if (ClientUpdateRate != 0) {
        output.WriteRawTag(232, 1);
        output.WriteInt32(ClientUpdateRate);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Player1X != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Player1X);
      }
      if (Player1Y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Player1Y);
      }
      if (Player1Speed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Player1Speed);
      }
      if (Player1ScaleY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Player1ScaleY);
      }
      if (Player1EntityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Player1EntityId);
      }
      if (Player2X != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Player2X);
      }
      if (Player2Y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Player2Y);
      }
      if (Player2Speed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Player2Speed);
      }
      if (Player2ScaleY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Player2ScaleY);
      }
      if (Player2EntityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Player2EntityId);
      }
      if (ServerUpdateRate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ServerUpdateRate);
      }
      if (BombSpeedLR != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BombSpeedLR);
      }
      if (MessSpeedLR != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MessSpeedLR);
      }
      if (BombSpeed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BombSpeed);
      }
      if (MessSpeed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MessSpeed);
      }
      if (NormalSpeed != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NormalSpeed);
      }
      if (ShootSpeed != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ShootSpeed);
      }
      if (BombDamage != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BombDamage);
      }
      if (MessDamage != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MessDamage);
      }
      if (Normaldamage != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Normaldamage);
      }
      if (BrickHp != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BrickHp);
      }
      if (AmmoNum != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AmmoNum);
      }
      if (ReloadTime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ReloadTime);
      }
      if (BaffleSpacing != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BaffleSpacing);
      }
      if (BulletSpacing != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BulletSpacing);
      }
      if (ScreenHeight != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ScreenHeight);
      }
      if (MessSpeedLRD != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MessSpeedLRD);
      }
      if (MaxBrick != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MaxBrick);
      }
      if (ClientUpdateRate != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ClientUpdateRate);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Player1X = input.ReadInt32();
            break;
          }
          case 16: {
            Player1Y = input.ReadInt32();
            break;
          }
          case 24: {
            Player1Speed = input.ReadInt32();
            break;
          }
          case 32: {
            Player1ScaleY = input.ReadInt32();
            break;
          }
          case 40: {
            Player1EntityId = input.ReadInt32();
            break;
          }
          case 48: {
            Player2X = input.ReadInt32();
            break;
          }
          case 56: {
            Player2Y = input.ReadInt32();
            break;
          }
          case 64: {
            Player2Speed = input.ReadInt32();
            break;
          }
          case 72: {
            Player2ScaleY = input.ReadInt32();
            break;
          }
          case 80: {
            Player2EntityId = input.ReadInt32();
            break;
          }
          case 88: {
            ServerUpdateRate = input.ReadInt32();
            break;
          }
          case 96: {
            BombSpeedLR = input.ReadInt32();
            break;
          }
          case 104: {
            MessSpeedLR = input.ReadInt32();
            break;
          }
          case 112: {
            BombSpeed = input.ReadInt32();
            break;
          }
          case 120: {
            MessSpeed = input.ReadInt32();
            break;
          }
          case 128: {
            NormalSpeed = input.ReadInt32();
            break;
          }
          case 136: {
            ShootSpeed = input.ReadInt32();
            break;
          }
          case 144: {
            BombDamage = input.ReadInt32();
            break;
          }
          case 152: {
            MessDamage = input.ReadInt32();
            break;
          }
          case 160: {
            Normaldamage = input.ReadInt32();
            break;
          }
          case 168: {
            BrickHp = input.ReadInt32();
            break;
          }
          case 176: {
            AmmoNum = input.ReadInt32();
            break;
          }
          case 184: {
            ReloadTime = input.ReadInt32();
            break;
          }
          case 192: {
            BaffleSpacing = input.ReadInt32();
            break;
          }
          case 200: {
            BulletSpacing = input.ReadInt32();
            break;
          }
          case 208: {
            ScreenHeight = input.ReadInt32();
            break;
          }
          case 216: {
            MessSpeedLRD = input.ReadInt32();
            break;
          }
          case 224: {
            MaxBrick = input.ReadInt32();
            break;
          }
          case 232: {
            ClientUpdateRate = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class pkgSCInACartridgeRep : pb::IMessage {
    private static readonly pb::MessageParser<pkgSCInACartridgeRep> _parser = new pb::MessageParser<pkgSCInACartridgeRep>(() => new pkgSCInACartridgeRep());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgSCInACartridgeRep> Parser { get { return _parser; } }

    /// <summary>Field number for the "ok" field.</summary>
    public const int OkFieldNumber = 1;
    private int ok_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ok {
      get { return ok_; }
      set {
        ok_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ok != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ok);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ok != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ok);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ok = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class pkgSCCreateBombBuffRep : pb::IMessage {
    private static readonly pb::MessageParser<pkgSCCreateBombBuffRep> _parser = new pb::MessageParser<pkgSCCreateBombBuffRep>(() => new pkgSCCreateBombBuffRep());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgSCCreateBombBuffRep> Parser { get { return _parser; } }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class pkgSCNextDaoshuNoticeRep : pb::IMessage {
    private static readonly pb::MessageParser<pkgSCNextDaoshuNoticeRep> _parser = new pb::MessageParser<pkgSCNextDaoshuNoticeRep>(() => new pkgSCNextDaoshuNoticeRep());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgSCNextDaoshuNoticeRep> Parser { get { return _parser; } }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 1;
    private int time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Time != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Time);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Time != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Time);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Time = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class pkgCSPlayerPsTransmitReq : pb::IMessage {
    private static readonly pb::MessageParser<pkgCSPlayerPsTransmitReq> _parser = new pb::MessageParser<pkgCSPlayerPsTransmitReq>(() => new pkgCSPlayerPsTransmitReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgCSPlayerPsTransmitReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private int x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "speed" field.</summary>
    public const int SpeedFieldNumber = 2;
    private int speed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(X);
      }
      if (Speed != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Speed);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
      }
      if (Speed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Speed);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            X = input.ReadInt32();
            break;
          }
          case 16: {
            Speed = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class pkgSCPlayerPsTransmitRep : pb::IMessage {
    private static readonly pb::MessageParser<pkgSCPlayerPsTransmitRep> _parser = new pb::MessageParser<pkgSCPlayerPsTransmitRep>(() => new pkgSCPlayerPsTransmitRep());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgSCPlayerPsTransmitRep> Parser { get { return _parser; } }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private int x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 2;
    private int owner_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Owner {
      get { return owner_; }
      set {
        owner_ = value;
      }
    }

    /// <summary>Field number for the "speed" field.</summary>
    public const int SpeedFieldNumber = 3;
    private int speed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(X);
      }
      if (Owner != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Owner);
      }
      if (Speed != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Speed);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
      }
      if (Owner != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Owner);
      }
      if (Speed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Speed);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            X = input.ReadInt32();
            break;
          }
          case 16: {
            Owner = input.ReadInt32();
            break;
          }
          case 24: {
            Speed = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class pkgCSGetServerLocalTimeReq : pb::IMessage {
    private static readonly pb::MessageParser<pkgCSGetServerLocalTimeReq> _parser = new pb::MessageParser<pkgCSGetServerLocalTimeReq>(() => new pkgCSGetServerLocalTimeReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgCSGetServerLocalTimeReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "client_times" field.</summary>
    public const int ClientTimesFieldNumber = 1;
    private long clientTimes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ClientTimes {
      get { return clientTimes_; }
      set {
        clientTimes_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClientTimes != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ClientTimes);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClientTimes != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ClientTimes);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ClientTimes = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class pkgSCGetServerLocalTimeRep : pb::IMessage {
    private static readonly pb::MessageParser<pkgSCGetServerLocalTimeRep> _parser = new pb::MessageParser<pkgSCGetServerLocalTimeRep>(() => new pkgSCGetServerLocalTimeRep());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgSCGetServerLocalTimeRep> Parser { get { return _parser; } }

    /// <summary>Field number for the "client_times" field.</summary>
    public const int ClientTimesFieldNumber = 1;
    private long clientTimes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ClientTimes {
      get { return clientTimes_; }
      set {
        clientTimes_ = value;
      }
    }

    /// <summary>Field number for the "server_tiems" field.</summary>
    public const int ServerTiemsFieldNumber = 2;
    private long serverTiems_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ServerTiems {
      get { return serverTiems_; }
      set {
        serverTiems_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClientTimes != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ClientTimes);
      }
      if (ServerTiems != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(ServerTiems);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClientTimes != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ClientTimes);
      }
      if (ServerTiems != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ServerTiems);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ClientTimes = input.ReadInt64();
            break;
          }
          case 16: {
            ServerTiems = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
