// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GoldMiner.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Protocol {

  #region Enums
  public enum ProtocolCmd {
    None = 0,
    /// <summary>
    ///===通用
    /// </summary>
    CslogOutReq = 1003,
    /// <summary>
    ///退出
    /// </summary>
    SclogOutRep = 1004,
    /// <summary>
    ///心跳协议请求
    /// </summary>
    CsheartBeatReq = 1010,
    /// <summary>
    ///心跳协议请求
    /// </summary>
    ScheartBeatRep = 1011,
    /// <summary>
    ///一盘游戏结束
    /// </summary>
    CsaroundOverReq = 1012,
    /// <summary>
    ///一盘游戏结束
    /// </summary>
    ScaroundOverRep = 1013,
    /// <summary>
    ///请求加入房间
    /// </summary>
    CsjoinRoomReq = 1016,
    /// <summary>
    ///请求加入房间
    /// </summary>
    ScjoinRoomRep = 1017,
    /// <summary>
    ///加载进度
    /// </summary>
    CsprogressRateReq = 1021,
    /// <summary>
    ///加载进度
    /// </summary>
    ScprogressRateRep = 1022,
    /// <summary>
    ///游戏开始
    /// </summary>
    ScgameStartRep = 1023,
    /// <summary>
    ///获取服务器时间
    /// </summary>
    CsgetServerLocalTimeReq = 1101,
    /// <summary>
    ///获取服务器时间返回	
    /// </summary>
    ScgetServerLocalTimeRep = 1102,
    /// <summary>
    ///获取游戏提示
    /// </summary>
    CsgetTipsContentReq = 1080,
    /// <summary>
    ///获取游戏提示	
    /// </summary>
    ScgetTipsContentRep = 1081,
    /// <summary>
    ///=========
    /// </summary>
    CsgameConfigReq = 1151,
    /// <summary>
    ///返回游戏配置
    /// </summary>
    ScgameConfigRep = 1152,
    /// <summary>
    ///返回游戏正式开始
    /// </summary>
    ScgameRun = 1161,
    /// <summary>
    ///=========
    /// </summary>
    CsupState = 1171,
    /// <summary>
    ///服务器下发状态改变
    /// </summary>
    ScdownState = 1172,
    ScstageCreateNoteiceRep = 1182,
  }

  public enum ERROCODE {
    None = 0,
    Successful = 1,
  }

  #endregion

  #region Messages
  public sealed class MapRes : pb::IMessage {
    private static readonly pb::MessageParser<MapRes> _parser = new pb::MessageParser<MapRes>(() => new MapRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MapRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private int x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private int y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "res_type" field.</summary>
    public const int ResTypeFieldNumber = 3;
    private int resType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ResType {
      get { return resType_; }
      set {
        resType_ = value;
      }
    }

    /// <summary>Field number for the "speed" field.</summary>
    public const int SpeedFieldNumber = 4;
    private int speed_;
    /// <summary>
    ///速度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }

    /// <summary>Field number for the "socre" field.</summary>
    public const int SocreFieldNumber = 5;
    private int socre_;
    /// <summary>
    ///分数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Socre {
      get { return socre_; }
      set {
        socre_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(X);
      }
      if (Y != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Y);
      }
      if (ResType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ResType);
      }
      if (Speed != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Speed);
      }
      if (Socre != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Socre);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
      }
      if (Y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Y);
      }
      if (ResType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ResType);
      }
      if (Speed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Speed);
      }
      if (Socre != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Socre);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            X = input.ReadInt32();
            break;
          }
          case 16: {
            Y = input.ReadInt32();
            break;
          }
          case 24: {
            ResType = input.ReadInt32();
            break;
          }
          case 32: {
            Speed = input.ReadInt32();
            break;
          }
          case 40: {
            Socre = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///===通用
  /// </summary>
  public sealed class pkgCSJoinRoomReq : pb::IMessage {
    private static readonly pb::MessageParser<pkgCSJoinRoomReq> _parser = new pb::MessageParser<pkgCSJoinRoomReq>(() => new pkgCSJoinRoomReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgCSJoinRoomReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "iroomid" field.</summary>
    public const int IroomidFieldNumber = 1;
    private long iroomid_;
    /// <summary>
    ///房间号 玩家id在消息头种赋值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Iroomid {
      get { return iroomid_; }
      set {
        iroomid_ = value;
      }
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 2;
    private int userId_;
    /// <summary>
    ///玩家id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 3;
    private string token_ = "";
    /// <summary>
    ///玩家toten
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Iroomid != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Iroomid);
      }
      if (UserId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(UserId);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Token);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Iroomid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Iroomid);
      }
      if (UserId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserId);
      }
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Iroomid = input.ReadInt64();
            break;
          }
          case 16: {
            UserId = input.ReadInt32();
            break;
          }
          case 26: {
            Token = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed class pkgSCJoinRoomRep : pb::IMessage {
    private static readonly pb::MessageParser<pkgSCJoinRoomRep> _parser = new pb::MessageParser<pkgSCJoinRoomRep>(() => new pkgSCJoinRoomRep());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgSCJoinRoomRep> Parser { get { return _parser; } }

    /// <summary>Field number for the "ok" field.</summary>
    public const int OkFieldNumber = 1;
    private int ok_;
    /// <summary>
    ///1成功 0失败
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ok {
      get { return ok_; }
      set {
        ok_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ok != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ok);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ok != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ok);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ok = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class pkgCSProgressRateReq : pb::IMessage {
    private static readonly pb::MessageParser<pkgCSProgressRateReq> _parser = new pb::MessageParser<pkgCSProgressRateReq>(() => new pkgCSProgressRateReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgCSProgressRateReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "rate" field.</summary>
    public const int RateFieldNumber = 1;
    private int rate_;
    /// <summary>
    ///0到100
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rate {
      get { return rate_; }
      set {
        rate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Rate != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Rate);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Rate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rate);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Rate = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class pkgSCProgressRateRep : pb::IMessage {
    private static readonly pb::MessageParser<pkgSCProgressRateRep> _parser = new pb::MessageParser<pkgSCProgressRateRep>(() => new pkgSCProgressRateRep());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgSCProgressRateRep> Parser { get { return _parser; } }

    /// <summary>Field number for the "rate" field.</summary>
    public const int RateFieldNumber = 1;
    private int rate_;
    /// <summary>
    ///0到100
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rate {
      get { return rate_; }
      set {
        rate_ = value;
      }
    }

    /// <summary>Field number for the "userid" field.</summary>
    public const int UseridFieldNumber = 2;
    private int userid_;
    /// <summary>
    ///玩家id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Userid {
      get { return userid_; }
      set {
        userid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Rate != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Rate);
      }
      if (Userid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Userid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Rate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rate);
      }
      if (Userid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Userid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Rate = input.ReadInt32();
            break;
          }
          case 16: {
            Userid = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class pkgSCGameStartRep : pb::IMessage {
    private static readonly pb::MessageParser<pkgSCGameStartRep> _parser = new pb::MessageParser<pkgSCGameStartRep>(() => new pkgSCGameStartRep());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgSCGameStartRep> Parser { get { return _parser; } }

    /// <summary>Field number for the "ok" field.</summary>
    public const int OkFieldNumber = 1;
    private long ok_;
    /// <summary>
    ///任意值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Ok {
      get { return ok_; }
      set {
        ok_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ok != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Ok);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ok != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Ok);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ok = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class pkgSCGameOverRep : pb::IMessage {
    private static readonly pb::MessageParser<pkgSCGameOverRep> _parser = new pb::MessageParser<pkgSCGameOverRep>(() => new pkgSCGameOverRep());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgSCGameOverRep> Parser { get { return _parser; } }

    /// <summary>Field number for the "ok" field.</summary>
    public const int OkFieldNumber = 1;
    private int ok_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ok {
      get { return ok_; }
      set {
        ok_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ok != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ok);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ok != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ok);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ok = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class pkgCSLogOutReq : pb::IMessage {
    private static readonly pb::MessageParser<pkgCSLogOutReq> _parser = new pb::MessageParser<pkgCSLogOutReq>(() => new pkgCSLogOutReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgCSLogOutReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "ok" field.</summary>
    public const int OkFieldNumber = 1;
    private int ok_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ok {
      get { return ok_; }
      set {
        ok_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ok != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ok);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ok != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ok);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ok = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class pkgSCLogOutRep : pb::IMessage {
    private static readonly pb::MessageParser<pkgSCLogOutRep> _parser = new pb::MessageParser<pkgSCLogOutRep>(() => new pkgSCLogOutRep());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgSCLogOutRep> Parser { get { return _parser; } }

    /// <summary>Field number for the "ok" field.</summary>
    public const int OkFieldNumber = 1;
    private int ok_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ok {
      get { return ok_; }
      set {
        ok_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ok != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ok);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ok != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ok);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ok = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class pkgCSHeartBeatReq : pb::IMessage {
    private static readonly pb::MessageParser<pkgCSHeartBeatReq> _parser = new pb::MessageParser<pkgCSHeartBeatReq>(() => new pkgCSHeartBeatReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgCSHeartBeatReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "ok" field.</summary>
    public const int OkFieldNumber = 1;
    private int ok_;
    /// <summary>
    ///任意值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ok {
      get { return ok_; }
      set {
        ok_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ok != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ok);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ok != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ok);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ok = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class pkgSCHeartBeatRep : pb::IMessage {
    private static readonly pb::MessageParser<pkgSCHeartBeatRep> _parser = new pb::MessageParser<pkgSCHeartBeatRep>(() => new pkgSCHeartBeatRep());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgSCHeartBeatRep> Parser { get { return _parser; } }

    /// <summary>Field number for the "itimes" field.</summary>
    public const int ItimesFieldNumber = 1;
    private int itimes_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Itimes {
      get { return itimes_; }
      set {
        itimes_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Itimes != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Itimes);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Itimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Itimes);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Itimes = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class pkgCSARoundOverReq : pb::IMessage {
    private static readonly pb::MessageParser<pkgCSARoundOverReq> _parser = new pb::MessageParser<pkgCSARoundOverReq>(() => new pkgCSARoundOverReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgCSARoundOverReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "ok" field.</summary>
    public const int OkFieldNumber = 1;
    private int ok_;
    /// <summary>
    ///任意值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ok {
      get { return ok_; }
      set {
        ok_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ok != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ok);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ok != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ok);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ok = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class pkgSCARoundOverRep : pb::IMessage {
    private static readonly pb::MessageParser<pkgSCARoundOverRep> _parser = new pb::MessageParser<pkgSCARoundOverRep>(() => new pkgSCARoundOverRep());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgSCARoundOverRep> Parser { get { return _parser; } }

    /// <summary>Field number for the "ok" field.</summary>
    public const int OkFieldNumber = 1;
    private int ok_;
    /// <summary>
    ///任意值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ok {
      get { return ok_; }
      set {
        ok_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ok != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ok);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ok != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ok);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ok = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class pkgCSGetServerLocalTimeReq : pb::IMessage {
    private static readonly pb::MessageParser<pkgCSGetServerLocalTimeReq> _parser = new pb::MessageParser<pkgCSGetServerLocalTimeReq>(() => new pkgCSGetServerLocalTimeReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgCSGetServerLocalTimeReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "client_times" field.</summary>
    public const int ClientTimesFieldNumber = 1;
    private long clientTimes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ClientTimes {
      get { return clientTimes_; }
      set {
        clientTimes_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClientTimes != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ClientTimes);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClientTimes != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ClientTimes);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ClientTimes = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class pkgSCGetServerLocalTimeRep : pb::IMessage {
    private static readonly pb::MessageParser<pkgSCGetServerLocalTimeRep> _parser = new pb::MessageParser<pkgSCGetServerLocalTimeRep>(() => new pkgSCGetServerLocalTimeRep());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgSCGetServerLocalTimeRep> Parser { get { return _parser; } }

    /// <summary>Field number for the "client_times" field.</summary>
    public const int ClientTimesFieldNumber = 1;
    private long clientTimes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ClientTimes {
      get { return clientTimes_; }
      set {
        clientTimes_ = value;
      }
    }

    /// <summary>Field number for the "server_tiems" field.</summary>
    public const int ServerTiemsFieldNumber = 2;
    private long serverTiems_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ServerTiems {
      get { return serverTiems_; }
      set {
        serverTiems_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClientTimes != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ClientTimes);
      }
      if (ServerTiems != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(ServerTiems);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClientTimes != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ClientTimes);
      }
      if (ServerTiems != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ServerTiems);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ClientTimes = input.ReadInt64();
            break;
          }
          case 16: {
            ServerTiems = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class pkgCSGetTipsContentReq : pb::IMessage {
    private static readonly pb::MessageParser<pkgCSGetTipsContentReq> _parser = new pb::MessageParser<pkgCSGetTipsContentReq>(() => new pkgCSGetTipsContentReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgCSGetTipsContentReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "req" field.</summary>
    public const int ReqFieldNumber = 1;
    private int req_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Req {
      get { return req_; }
      set {
        req_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Req != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Req);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Req != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Req);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Req = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class pkgSCGetTipsContentRep : pb::IMessage {
    private static readonly pb::MessageParser<pkgSCGetTipsContentRep> _parser = new pb::MessageParser<pkgSCGetTipsContentRep>(() => new pkgSCGetTipsContentRep());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgSCGetTipsContentRep> Parser { get { return _parser; } }

    /// <summary>Field number for the "tips" field.</summary>
    public const int TipsFieldNumber = 1;
    private string tips_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Tips {
      get { return tips_; }
      set {
        tips_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Tips.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Tips);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Tips.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Tips);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Tips = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed class pkgCSGameConfigReq : pb::IMessage {
    private static readonly pb::MessageParser<pkgCSGameConfigReq> _parser = new pb::MessageParser<pkgCSGameConfigReq>(() => new pkgCSGameConfigReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgCSGameConfigReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class pkgSCGameConfigRep : pb::IMessage {
    private static readonly pb::MessageParser<pkgSCGameConfigRep> _parser = new pb::MessageParser<pkgSCGameConfigRep>(() => new pkgSCGameConfigRep());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgSCGameConfigRep> Parser { get { return _parser; } }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 1;
    private int position_;
    /// <summary>
    ///位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "Angle" field.</summary>
    public const int AngleFieldNumber = 2;
    private int angle_;
    /// <summary>
    ///最大角度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Angle {
      get { return angle_; }
      set {
        angle_ = value;
      }
    }

    /// <summary>Field number for the "HookRotationSpeed" field.</summary>
    public const int HookRotationSpeedFieldNumber = 3;
    private int hookRotationSpeed_;
    /// <summary>
    ///旋转速度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HookRotationSpeed {
      get { return hookRotationSpeed_; }
      set {
        hookRotationSpeed_ = value;
      }
    }

    /// <summary>Field number for the "HookRunSpeed" field.</summary>
    public const int HookRunSpeedFieldNumber = 4;
    private int hookRunSpeed_;
    /// <summary>
    ///空钩速度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HookRunSpeed {
      get { return hookRunSpeed_; }
      set {
        hookRunSpeed_ = value;
      }
    }

    /// <summary>Field number for the "Player1StartRotaion" field.</summary>
    public const int Player1StartRotaionFieldNumber = 5;
    private int player1StartRotaion_;
    /// <summary>
    ///玩家1开始角度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Player1StartRotaion {
      get { return player1StartRotaion_; }
      set {
        player1StartRotaion_ = value;
      }
    }

    /// <summary>Field number for the "Player2StartRotaion" field.</summary>
    public const int Player2StartRotaionFieldNumber = 6;
    private int player2StartRotaion_;
    /// <summary>
    ///玩家2开始角度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Player2StartRotaion {
      get { return player2StartRotaion_; }
      set {
        player2StartRotaion_ = value;
      }
    }

    /// <summary>Field number for the "HookMaxLength" field.</summary>
    public const int HookMaxLengthFieldNumber = 7;
    private int hookMaxLength_;
    /// <summary>
    ///最远飞多长
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HookMaxLength {
      get { return hookMaxLength_; }
      set {
        hookMaxLength_ = value;
      }
    }

    /// <summary>Field number for the "mapres" field.</summary>
    public const int MapresFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Protocol.MapRes> _repeated_mapres_codec
        = pb::FieldCodec.ForMessage(66, global::Protocol.MapRes.Parser);
    private readonly pbc::RepeatedField<global::Protocol.MapRes> mapres_ = new pbc::RepeatedField<global::Protocol.MapRes>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.MapRes> Mapres {
      get { return mapres_; }
    }

    /// <summary>Field number for the "LifeTime" field.</summary>
    public const int LifeTimeFieldNumber = 9;
    private int lifeTime_;
    /// <summary>
    ///加速道具持续时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LifeTime {
      get { return lifeTime_; }
      set {
        lifeTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Position != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Position);
      }
      if (Angle != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Angle);
      }
      if (HookRotationSpeed != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(HookRotationSpeed);
      }
      if (HookRunSpeed != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(HookRunSpeed);
      }
      if (Player1StartRotaion != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Player1StartRotaion);
      }
      if (Player2StartRotaion != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Player2StartRotaion);
      }
      if (HookMaxLength != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(HookMaxLength);
      }
      mapres_.WriteTo(output, _repeated_mapres_codec);
      if (LifeTime != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(LifeTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Position != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Position);
      }
      if (Angle != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Angle);
      }
      if (HookRotationSpeed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HookRotationSpeed);
      }
      if (HookRunSpeed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HookRunSpeed);
      }
      if (Player1StartRotaion != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Player1StartRotaion);
      }
      if (Player2StartRotaion != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Player2StartRotaion);
      }
      if (HookMaxLength != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HookMaxLength);
      }
      size += mapres_.CalculateSize(_repeated_mapres_codec);
      if (LifeTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LifeTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Position = input.ReadInt32();
            break;
          }
          case 16: {
            Angle = input.ReadInt32();
            break;
          }
          case 24: {
            HookRotationSpeed = input.ReadInt32();
            break;
          }
          case 32: {
            HookRunSpeed = input.ReadInt32();
            break;
          }
          case 40: {
            Player1StartRotaion = input.ReadInt32();
            break;
          }
          case 48: {
            Player2StartRotaion = input.ReadInt32();
            break;
          }
          case 56: {
            HookMaxLength = input.ReadInt32();
            break;
          }
          case 66: {
            mapres_.AddEntriesFrom(input, _repeated_mapres_codec);
            break;
          }
          case 72: {
            LifeTime = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///游戏正式开始
  /// </summary>
  public sealed class pkgSCGameRun : pb::IMessage {
    private static readonly pb::MessageParser<pkgSCGameRun> _parser = new pb::MessageParser<pkgSCGameRun>(() => new pkgSCGameRun());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgSCGameRun> Parser { get { return _parser; } }

    /// <summary>Field number for the "server_tiems" field.</summary>
    public const int ServerTiemsFieldNumber = 1;
    private long serverTiems_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ServerTiems {
      get { return serverTiems_; }
      set {
        serverTiems_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ServerTiems != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ServerTiems);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServerTiems != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ServerTiems);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ServerTiems = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///物体状态 id：x坐标*100+y坐标,start_time:状态改变时间,state：状态
  /// </summary>
  public sealed class pkgItemState : pb::IMessage {
    private static readonly pb::MessageParser<pkgItemState> _parser = new pb::MessageParser<pkgItemState>(() => new pkgItemState());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgItemState> Parser { get { return _parser; } }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "start_time" field.</summary>
    public const int StartTimeFieldNumber = 2;
    private long startTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 3;
    private int state_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (StartTime != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(StartTime);
      }
      if (State != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(State);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (StartTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartTime);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            StartTime = input.ReadInt64();
            break;
          }
          case 24: {
            State = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///上传钩子状态
  /// </summary>
  public sealed class pkgCSUpHookState : pb::IMessage {
    private static readonly pb::MessageParser<pkgCSUpHookState> _parser = new pb::MessageParser<pkgCSUpHookState>(() => new pkgCSUpHookState());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgCSUpHookState> Parser { get { return _parser; } }

    /// <summary>Field number for the "player" field.</summary>
    public const int PlayerFieldNumber = 1;
    private int player_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Player {
      get { return player_; }
      set {
        player_ = value;
      }
    }

    /// <summary>Field number for the "start_time" field.</summary>
    public const int StartTimeFieldNumber = 2;
    private long startTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 3;
    private int state_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 4;
    private int x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 5;
    private int y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "rotaion" field.</summary>
    public const int RotaionFieldNumber = 6;
    private int rotaion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rotaion {
      get { return rotaion_; }
      set {
        rotaion_ = value;
      }
    }

    /// <summary>Field number for the "hit_obj1" field.</summary>
    public const int HitObj1FieldNumber = 7;
    private int hitObj1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HitObj1 {
      get { return hitObj1_; }
      set {
        hitObj1_ = value;
      }
    }

    /// <summary>Field number for the "hit_obj1_time" field.</summary>
    public const int HitObj1TimeFieldNumber = 8;
    private long hitObj1Time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long HitObj1Time {
      get { return hitObj1Time_; }
      set {
        hitObj1Time_ = value;
      }
    }

    /// <summary>Field number for the "hit_obj2" field.</summary>
    public const int HitObj2FieldNumber = 9;
    private int hitObj2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HitObj2 {
      get { return hitObj2_; }
      set {
        hitObj2_ = value;
      }
    }

    /// <summary>Field number for the "hit_obj2_time" field.</summary>
    public const int HitObj2TimeFieldNumber = 10;
    private long hitObj2Time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long HitObj2Time {
      get { return hitObj2Time_; }
      set {
        hitObj2Time_ = value;
      }
    }

    /// <summary>Field number for the "speed_buffer" field.</summary>
    public const int SpeedBufferFieldNumber = 11;
    private int speedBuffer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SpeedBuffer {
      get { return speedBuffer_; }
      set {
        speedBuffer_ = value;
      }
    }

    /// <summary>Field number for the "current_speed_x" field.</summary>
    public const int CurrentSpeedXFieldNumber = 12;
    private int currentSpeedX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrentSpeedX {
      get { return currentSpeedX_; }
      set {
        currentSpeedX_ = value;
      }
    }

    /// <summary>Field number for the "current_speed_y" field.</summary>
    public const int CurrentSpeedYFieldNumber = 13;
    private int currentSpeedY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrentSpeedY {
      get { return currentSpeedY_; }
      set {
        currentSpeedY_ = value;
      }
    }

    /// <summary>Field number for the "btn1_obj" field.</summary>
    public const int Btn1ObjFieldNumber = 14;
    private int btn1Obj_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Btn1Obj {
      get { return btn1Obj_; }
      set {
        btn1Obj_ = value;
      }
    }

    /// <summary>Field number for the "btn2_obj" field.</summary>
    public const int Btn2ObjFieldNumber = 15;
    private int btn2Obj_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Btn2Obj {
      get { return btn2Obj_; }
      set {
        btn2Obj_ = value;
      }
    }

    /// <summary>Field number for the "speed_buffer_start_time" field.</summary>
    public const int SpeedBufferStartTimeFieldNumber = 16;
    private long speedBufferStartTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SpeedBufferStartTime {
      get { return speedBufferStartTime_; }
      set {
        speedBufferStartTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Player != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Player);
      }
      if (StartTime != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(StartTime);
      }
      if (State != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(State);
      }
      if (X != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(X);
      }
      if (Y != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Y);
      }
      if (Rotaion != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Rotaion);
      }
      if (HitObj1 != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(HitObj1);
      }
      if (HitObj1Time != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(HitObj1Time);
      }
      if (HitObj2 != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(HitObj2);
      }
      if (HitObj2Time != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(HitObj2Time);
      }
      if (SpeedBuffer != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(SpeedBuffer);
      }
      if (CurrentSpeedX != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(CurrentSpeedX);
      }
      if (CurrentSpeedY != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(CurrentSpeedY);
      }
      if (Btn1Obj != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(Btn1Obj);
      }
      if (Btn2Obj != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(Btn2Obj);
      }
      if (SpeedBufferStartTime != 0L) {
        output.WriteRawTag(128, 1);
        output.WriteInt64(SpeedBufferStartTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Player != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Player);
      }
      if (StartTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartTime);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
      }
      if (X != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
      }
      if (Y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Y);
      }
      if (Rotaion != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rotaion);
      }
      if (HitObj1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HitObj1);
      }
      if (HitObj1Time != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(HitObj1Time);
      }
      if (HitObj2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HitObj2);
      }
      if (HitObj2Time != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(HitObj2Time);
      }
      if (SpeedBuffer != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpeedBuffer);
      }
      if (CurrentSpeedX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentSpeedX);
      }
      if (CurrentSpeedY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentSpeedY);
      }
      if (Btn1Obj != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Btn1Obj);
      }
      if (Btn2Obj != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Btn2Obj);
      }
      if (SpeedBufferStartTime != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(SpeedBufferStartTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Player = input.ReadInt32();
            break;
          }
          case 16: {
            StartTime = input.ReadInt64();
            break;
          }
          case 24: {
            State = input.ReadInt32();
            break;
          }
          case 32: {
            X = input.ReadInt32();
            break;
          }
          case 40: {
            Y = input.ReadInt32();
            break;
          }
          case 48: {
            Rotaion = input.ReadInt32();
            break;
          }
          case 56: {
            HitObj1 = input.ReadInt32();
            break;
          }
          case 64: {
            HitObj1Time = input.ReadInt64();
            break;
          }
          case 72: {
            HitObj2 = input.ReadInt32();
            break;
          }
          case 80: {
            HitObj2Time = input.ReadInt64();
            break;
          }
          case 88: {
            SpeedBuffer = input.ReadInt32();
            break;
          }
          case 96: {
            CurrentSpeedX = input.ReadInt32();
            break;
          }
          case 104: {
            CurrentSpeedY = input.ReadInt32();
            break;
          }
          case 112: {
            Btn1Obj = input.ReadInt32();
            break;
          }
          case 120: {
            Btn2Obj = input.ReadInt32();
            break;
          }
          case 128: {
            SpeedBufferStartTime = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///服务器下发钩子状态
  /// </summary>
  public sealed class pkgSCHookState : pb::IMessage {
    private static readonly pb::MessageParser<pkgSCHookState> _parser = new pb::MessageParser<pkgSCHookState>(() => new pkgSCHookState());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgSCHookState> Parser { get { return _parser; } }

    /// <summary>Field number for the "player" field.</summary>
    public const int PlayerFieldNumber = 1;
    private int player_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Player {
      get { return player_; }
      set {
        player_ = value;
      }
    }

    /// <summary>Field number for the "start_time" field.</summary>
    public const int StartTimeFieldNumber = 2;
    private long startTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 3;
    private int state_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 4;
    private int x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 5;
    private int y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "rotaion" field.</summary>
    public const int RotaionFieldNumber = 6;
    private int rotaion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rotaion {
      get { return rotaion_; }
      set {
        rotaion_ = value;
      }
    }

    /// <summary>Field number for the "rotaion_next" field.</summary>
    public const int RotaionNextFieldNumber = 7;
    private int rotaionNext_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RotaionNext {
      get { return rotaionNext_; }
      set {
        rotaionNext_ = value;
      }
    }

    /// <summary>Field number for the "hit_obj" field.</summary>
    public const int HitObjFieldNumber = 8;
    private int hitObj_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HitObj {
      get { return hitObj_; }
      set {
        hitObj_ = value;
      }
    }

    /// <summary>Field number for the "hit_obj1_time" field.</summary>
    public const int HitObj1TimeFieldNumber = 9;
    private long hitObj1Time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long HitObj1Time {
      get { return hitObj1Time_; }
      set {
        hitObj1Time_ = value;
      }
    }

    /// <summary>Field number for the "speed_buffer" field.</summary>
    public const int SpeedBufferFieldNumber = 10;
    private int speedBuffer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SpeedBuffer {
      get { return speedBuffer_; }
      set {
        speedBuffer_ = value;
      }
    }

    /// <summary>Field number for the "current_speed_x" field.</summary>
    public const int CurrentSpeedXFieldNumber = 11;
    private int currentSpeedX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrentSpeedX {
      get { return currentSpeedX_; }
      set {
        currentSpeedX_ = value;
      }
    }

    /// <summary>Field number for the "current_speed_y" field.</summary>
    public const int CurrentSpeedYFieldNumber = 12;
    private int currentSpeedY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrentSpeedY {
      get { return currentSpeedY_; }
      set {
        currentSpeedY_ = value;
      }
    }

    /// <summary>Field number for the "btn1_obj" field.</summary>
    public const int Btn1ObjFieldNumber = 13;
    private int btn1Obj_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Btn1Obj {
      get { return btn1Obj_; }
      set {
        btn1Obj_ = value;
      }
    }

    /// <summary>Field number for the "btn2_obj" field.</summary>
    public const int Btn2ObjFieldNumber = 14;
    private int btn2Obj_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Btn2Obj {
      get { return btn2Obj_; }
      set {
        btn2Obj_ = value;
      }
    }

    /// <summary>Field number for the "speed_buffer_start_time" field.</summary>
    public const int SpeedBufferStartTimeFieldNumber = 15;
    private long speedBufferStartTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SpeedBufferStartTime {
      get { return speedBufferStartTime_; }
      set {
        speedBufferStartTime_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 16;
    private long type_;
    /// <summary>
    ///1：转发 2：更正
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Player != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Player);
      }
      if (StartTime != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(StartTime);
      }
      if (State != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(State);
      }
      if (X != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(X);
      }
      if (Y != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Y);
      }
      if (Rotaion != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Rotaion);
      }
      if (RotaionNext != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(RotaionNext);
      }
      if (HitObj != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(HitObj);
      }
      if (HitObj1Time != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(HitObj1Time);
      }
      if (SpeedBuffer != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(SpeedBuffer);
      }
      if (CurrentSpeedX != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(CurrentSpeedX);
      }
      if (CurrentSpeedY != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(CurrentSpeedY);
      }
      if (Btn1Obj != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(Btn1Obj);
      }
      if (Btn2Obj != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(Btn2Obj);
      }
      if (SpeedBufferStartTime != 0L) {
        output.WriteRawTag(120);
        output.WriteInt64(SpeedBufferStartTime);
      }
      if (Type != 0L) {
        output.WriteRawTag(128, 1);
        output.WriteInt64(Type);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Player != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Player);
      }
      if (StartTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartTime);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
      }
      if (X != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
      }
      if (Y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Y);
      }
      if (Rotaion != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rotaion);
      }
      if (RotaionNext != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RotaionNext);
      }
      if (HitObj != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HitObj);
      }
      if (HitObj1Time != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(HitObj1Time);
      }
      if (SpeedBuffer != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpeedBuffer);
      }
      if (CurrentSpeedX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentSpeedX);
      }
      if (CurrentSpeedY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentSpeedY);
      }
      if (Btn1Obj != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Btn1Obj);
      }
      if (Btn2Obj != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Btn2Obj);
      }
      if (SpeedBufferStartTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SpeedBufferStartTime);
      }
      if (Type != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Player = input.ReadInt32();
            break;
          }
          case 16: {
            StartTime = input.ReadInt64();
            break;
          }
          case 24: {
            State = input.ReadInt32();
            break;
          }
          case 32: {
            X = input.ReadInt32();
            break;
          }
          case 40: {
            Y = input.ReadInt32();
            break;
          }
          case 48: {
            Rotaion = input.ReadInt32();
            break;
          }
          case 56: {
            RotaionNext = input.ReadInt32();
            break;
          }
          case 64: {
            HitObj = input.ReadInt32();
            break;
          }
          case 72: {
            HitObj1Time = input.ReadInt64();
            break;
          }
          case 80: {
            SpeedBuffer = input.ReadInt32();
            break;
          }
          case 88: {
            CurrentSpeedX = input.ReadInt32();
            break;
          }
          case 96: {
            CurrentSpeedY = input.ReadInt32();
            break;
          }
          case 104: {
            Btn1Obj = input.ReadInt32();
            break;
          }
          case 112: {
            Btn2Obj = input.ReadInt32();
            break;
          }
          case 120: {
            SpeedBufferStartTime = input.ReadInt64();
            break;
          }
          case 128: {
            Type = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///服务器下发状态改变
  /// </summary>
  public sealed class pkgDownState : pb::IMessage {
    private static readonly pb::MessageParser<pkgDownState> _parser = new pb::MessageParser<pkgDownState>(() => new pkgDownState());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgDownState> Parser { get { return _parser; } }

    /// <summary>Field number for the "HookState" field.</summary>
    public const int HookStateFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Protocol.pkgSCHookState> _repeated_hookState_codec
        = pb::FieldCodec.ForMessage(10, global::Protocol.pkgSCHookState.Parser);
    private readonly pbc::RepeatedField<global::Protocol.pkgSCHookState> hookState_ = new pbc::RepeatedField<global::Protocol.pkgSCHookState>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.pkgSCHookState> HookState {
      get { return hookState_; }
    }

    /// <summary>Field number for the "ItemStates" field.</summary>
    public const int ItemStatesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Protocol.pkgItemState> _repeated_itemStates_codec
        = pb::FieldCodec.ForMessage(18, global::Protocol.pkgItemState.Parser);
    private readonly pbc::RepeatedField<global::Protocol.pkgItemState> itemStates_ = new pbc::RepeatedField<global::Protocol.pkgItemState>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.pkgItemState> ItemStates {
      get { return itemStates_; }
    }

    /// <summary>Field number for the "score1" field.</summary>
    public const int Score1FieldNumber = 3;
    private int score1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Score1 {
      get { return score1_; }
      set {
        score1_ = value;
      }
    }

    /// <summary>Field number for the "score2" field.</summary>
    public const int Score2FieldNumber = 4;
    private int score2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Score2 {
      get { return score2_; }
      set {
        score2_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      hookState_.WriteTo(output, _repeated_hookState_codec);
      itemStates_.WriteTo(output, _repeated_itemStates_codec);
      if (Score1 != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Score1);
      }
      if (Score2 != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Score2);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += hookState_.CalculateSize(_repeated_hookState_codec);
      size += itemStates_.CalculateSize(_repeated_itemStates_codec);
      if (Score1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Score1);
      }
      if (Score2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Score2);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            hookState_.AddEntriesFrom(input, _repeated_hookState_codec);
            break;
          }
          case 18: {
            itemStates_.AddEntriesFrom(input, _repeated_itemStates_codec);
            break;
          }
          case 24: {
            Score1 = input.ReadInt32();
            break;
          }
          case 32: {
            Score2 = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class pkgSCStageCreateNoteiceRep : pb::IMessage {
    private static readonly pb::MessageParser<pkgSCStageCreateNoteiceRep> _parser = new pb::MessageParser<pkgSCStageCreateNoteiceRep>(() => new pkgSCStageCreateNoteiceRep());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgSCStageCreateNoteiceRep> Parser { get { return _parser; } }

    /// <summary>Field number for the "mapres" field.</summary>
    public const int MapresFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Protocol.MapRes> _repeated_mapres_codec
        = pb::FieldCodec.ForMessage(10, global::Protocol.MapRes.Parser);
    private readonly pbc::RepeatedField<global::Protocol.MapRes> mapres_ = new pbc::RepeatedField<global::Protocol.MapRes>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.MapRes> Mapres {
      get { return mapres_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      mapres_.WriteTo(output, _repeated_mapres_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += mapres_.CalculateSize(_repeated_mapres_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            mapres_.AddEntriesFrom(input, _repeated_mapres_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
