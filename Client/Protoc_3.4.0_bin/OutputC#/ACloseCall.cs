// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ACloseCall.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace ACloseCall {

  #region Enums
  public enum ProtocolCmd {
    /// <summary>
    ///无用位
    /// </summary>
    Zero = 0,
    /// <summary>
    ///退出
    /// </summary>
    CslogOutReq = 1003,
    /// <summary>
    ///退出
    /// </summary>
    SclogOutRep = 1004,
    /// <summary>
    ///协议转发
    /// </summary>
    CsccommonReq = 1005,
    /// <summary>
    ///协议转发		
    /// </summary>
    ScccommonRep = 1006,
    /// <summary>
    ///协议接受	
    /// </summary>
    CscreceiveRep = 1007,
    /// <summary>
    ///心跳协议请求
    /// </summary>
    CsheartBeatReq = 1010,
    /// <summary>
    ///心跳协议请求
    /// </summary>
    ScheartBeatRep = 1011,
    /// <summary>
    ///请求加入房间
    /// </summary>
    CsjoinRoomReq = 1016,
    /// <summary>
    ///请求加入房间    
    /// </summary>
    ScjoinRoomRep = 1017,
    /// <summary>
    ///加载进度
    /// </summary>
    CsprogressRateReq = 1021,
    /// <summary>
    ///加载进度
    /// </summary>
    ScprogressRateRep = 1022,
    /// <summary>
    ///游戏开始  
    /// </summary>
    ScgameStartRep = 1023,
    /// <summary>
    ///上报玩家位置及旋转信息
    /// </summary>
    CsplayerPosReq = 1024,
    /// <summary>
    ///接受玩家位置及旋转信息   
    /// </summary>
    ScplayerPosRep = 1025,
    /// <summary>
    ///发送火箭弹数据  
    /// </summary>
    CsrooketReq = 1026,
    /// <summary>
    ///接受火箭弹数据  
    /// </summary>
    ScrooketRep = 1027,
    /// <summary>
    ///请求游戏数据
    /// </summary>
    CsgameDataResetReq = 1028,
    /// <summary>
    ///接受游戏数据    
    /// </summary>
    ScgameDataResetRep = 1029,
    /// <summary>
    ///上传游戏得分
    /// </summary>
    CsgameTimeReq = 1031,
    /// <summary>
    /// </summary>
    ScgameTimeRep = 1032,
    /// <summary>
    ///游戏结束
    /// </summary>
    CsaroundOverReq = 1033,
    /// <summary>
    ///游戏结束
    /// </summary>
    ScaroundOverRep = 1034,
  }

  public enum ERROCODE {
    Successful = 0,
  }

  #endregion

  #region Messages
  public sealed class pkgCSLogOutReq : pb::IMessage {
    private static readonly pb::MessageParser<pkgCSLogOutReq> _parser = new pb::MessageParser<pkgCSLogOutReq>(() => new pkgCSLogOutReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgCSLogOutReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "ok" field.</summary>
    public const int OkFieldNumber = 1;
    private int ok_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ok {
      get { return ok_; }
      set {
        ok_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ok != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ok);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ok != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ok);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ok = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class pkgSCLogOutRep : pb::IMessage {
    private static readonly pb::MessageParser<pkgSCLogOutRep> _parser = new pb::MessageParser<pkgSCLogOutRep>(() => new pkgSCLogOutRep());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgSCLogOutRep> Parser { get { return _parser; } }

    /// <summary>Field number for the "ok" field.</summary>
    public const int OkFieldNumber = 1;
    private int ok_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ok {
      get { return ok_; }
      set {
        ok_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ok != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ok);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ok != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ok);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ok = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class pkgCSCCommonReq : pb::IMessage {
    private static readonly pb::MessageParser<pkgCSCCommonReq> _parser = new pb::MessageParser<pkgCSCCommonReq>(() => new pkgCSCCommonReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgCSCCommonReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "ok" field.</summary>
    public const int OkFieldNumber = 1;
    private int ok_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ok {
      get { return ok_; }
      set {
        ok_ = value;
      }
    }

    /// <summary>Field number for the "protocol" field.</summary>
    public const int ProtocolFieldNumber = 2;
    private pb::ByteString protocol_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Protocol {
      get { return protocol_; }
      set {
        protocol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ok != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ok);
      }
      if (Protocol.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Protocol);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ok != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ok);
      }
      if (Protocol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Protocol);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ok = input.ReadInt32();
            break;
          }
          case 18: {
            Protocol = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed class pkgSCCCommonRep : pb::IMessage {
    private static readonly pb::MessageParser<pkgSCCCommonRep> _parser = new pb::MessageParser<pkgSCCCommonRep>(() => new pkgSCCCommonRep());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgSCCCommonRep> Parser { get { return _parser; } }

    /// <summary>Field number for the "ok" field.</summary>
    public const int OkFieldNumber = 1;
    private int ok_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ok {
      get { return ok_; }
      set {
        ok_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ok != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ok);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ok != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ok);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ok = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class pkgCSCReceiveRep : pb::IMessage {
    private static readonly pb::MessageParser<pkgCSCReceiveRep> _parser = new pb::MessageParser<pkgCSCReceiveRep>(() => new pkgCSCReceiveRep());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgCSCReceiveRep> Parser { get { return _parser; } }

    /// <summary>Field number for the "nTimes" field.</summary>
    public const int NTimesFieldNumber = 1;
    private int nTimes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NTimes {
      get { return nTimes_; }
      set {
        nTimes_ = value;
      }
    }

    /// <summary>Field number for the "protocol" field.</summary>
    public const int ProtocolFieldNumber = 2;
    private pb::ByteString protocol_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Protocol {
      get { return protocol_; }
      set {
        protocol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NTimes != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(NTimes);
      }
      if (Protocol.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Protocol);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NTimes);
      }
      if (Protocol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Protocol);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            NTimes = input.ReadInt32();
            break;
          }
          case 18: {
            Protocol = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed class pkgCSHeartBeatReq : pb::IMessage {
    private static readonly pb::MessageParser<pkgCSHeartBeatReq> _parser = new pb::MessageParser<pkgCSHeartBeatReq>(() => new pkgCSHeartBeatReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgCSHeartBeatReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "ok" field.</summary>
    public const int OkFieldNumber = 1;
    private int ok_;
    /// <summary>
    ///任意值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ok {
      get { return ok_; }
      set {
        ok_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ok != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ok);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ok != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ok);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ok = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class pkgSCHeartBeatRep : pb::IMessage {
    private static readonly pb::MessageParser<pkgSCHeartBeatRep> _parser = new pb::MessageParser<pkgSCHeartBeatRep>(() => new pkgSCHeartBeatRep());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgSCHeartBeatRep> Parser { get { return _parser; } }

    /// <summary>Field number for the "itimes" field.</summary>
    public const int ItimesFieldNumber = 1;
    private int itimes_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Itimes {
      get { return itimes_; }
      set {
        itimes_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Itimes != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Itimes);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Itimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Itimes);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Itimes = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class pkgCSJoinRoomReq : pb::IMessage {
    private static readonly pb::MessageParser<pkgCSJoinRoomReq> _parser = new pb::MessageParser<pkgCSJoinRoomReq>(() => new pkgCSJoinRoomReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgCSJoinRoomReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "iroomid" field.</summary>
    public const int IroomidFieldNumber = 1;
    private long iroomid_;
    /// <summary>
    ///房间号 玩家id在消息头种赋值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Iroomid {
      get { return iroomid_; }
      set {
        iroomid_ = value;
      }
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 2;
    private int userId_;
    /// <summary>
    ///玩家id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 3;
    private string token_ = "";
    /// <summary>
    ///玩家toten
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Iroomid != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Iroomid);
      }
      if (UserId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(UserId);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Token);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Iroomid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Iroomid);
      }
      if (UserId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserId);
      }
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Iroomid = input.ReadInt64();
            break;
          }
          case 16: {
            UserId = input.ReadInt32();
            break;
          }
          case 26: {
            Token = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed class pkgSCJoinRoomRep : pb::IMessage {
    private static readonly pb::MessageParser<pkgSCJoinRoomRep> _parser = new pb::MessageParser<pkgSCJoinRoomRep>(() => new pkgSCJoinRoomRep());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgSCJoinRoomRep> Parser { get { return _parser; } }

    /// <summary>Field number for the "ok" field.</summary>
    public const int OkFieldNumber = 1;
    private int ok_;
    /// <summary>
    ///1成功 0失败
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ok {
      get { return ok_; }
      set {
        ok_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ok != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ok);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ok != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ok);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ok = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class pkgCSProgressRateReq : pb::IMessage {
    private static readonly pb::MessageParser<pkgCSProgressRateReq> _parser = new pb::MessageParser<pkgCSProgressRateReq>(() => new pkgCSProgressRateReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgCSProgressRateReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "rate" field.</summary>
    public const int RateFieldNumber = 1;
    private int rate_;
    /// <summary>
    ///0到100
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rate {
      get { return rate_; }
      set {
        rate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Rate != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Rate);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Rate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rate);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Rate = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class pkgSCProgressRateRep : pb::IMessage {
    private static readonly pb::MessageParser<pkgSCProgressRateRep> _parser = new pb::MessageParser<pkgSCProgressRateRep>(() => new pkgSCProgressRateRep());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgSCProgressRateRep> Parser { get { return _parser; } }

    /// <summary>Field number for the "rate" field.</summary>
    public const int RateFieldNumber = 1;
    private int rate_;
    /// <summary>
    ///0到100
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rate {
      get { return rate_; }
      set {
        rate_ = value;
      }
    }

    /// <summary>Field number for the "userid" field.</summary>
    public const int UseridFieldNumber = 2;
    private int userid_;
    /// <summary>
    ///玩家id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Userid {
      get { return userid_; }
      set {
        userid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Rate != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Rate);
      }
      if (Userid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Userid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Rate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rate);
      }
      if (Userid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Userid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Rate = input.ReadInt32();
            break;
          }
          case 16: {
            Userid = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class pkgSCGameStartRep : pb::IMessage {
    private static readonly pb::MessageParser<pkgSCGameStartRep> _parser = new pb::MessageParser<pkgSCGameStartRep>(() => new pkgSCGameStartRep());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgSCGameStartRep> Parser { get { return _parser; } }

    /// <summary>Field number for the "ok" field.</summary>
    public const int OkFieldNumber = 1;
    private int ok_;
    /// <summary>
    ///任意值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ok {
      get { return ok_; }
      set {
        ok_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ok != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ok);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ok != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ok);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ok = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class pkgCSGameTimeReq : pb::IMessage {
    private static readonly pb::MessageParser<pkgCSGameTimeReq> _parser = new pb::MessageParser<pkgCSGameTimeReq>(() => new pkgCSGameTimeReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgCSGameTimeReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 1;
    private int time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Time != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Time);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Time != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Time);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Time = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class pkgSCGameTimeRep : pb::IMessage {
    private static readonly pb::MessageParser<pkgSCGameTimeRep> _parser = new pb::MessageParser<pkgSCGameTimeRep>(() => new pkgSCGameTimeRep());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgSCGameTimeRep> Parser { get { return _parser; } }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 1;
    private int time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Time != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Time);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Time != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Time);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Time = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class pkgCSARoundOverReq : pb::IMessage {
    private static readonly pb::MessageParser<pkgCSARoundOverReq> _parser = new pb::MessageParser<pkgCSARoundOverReq>(() => new pkgCSARoundOverReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgCSARoundOverReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "ok" field.</summary>
    public const int OkFieldNumber = 1;
    private int ok_;
    /// <summary>
    ///1 胜利 0失败
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ok {
      get { return ok_; }
      set {
        ok_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ok != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ok);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ok != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ok);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ok = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class pkgSCARoundOverRep : pb::IMessage {
    private static readonly pb::MessageParser<pkgSCARoundOverRep> _parser = new pb::MessageParser<pkgSCARoundOverRep>(() => new pkgSCARoundOverRep());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgSCARoundOverRep> Parser { get { return _parser; } }

    /// <summary>Field number for the "ok" field.</summary>
    public const int OkFieldNumber = 1;
    private int ok_;
    /// <summary>
    ///1 胜利 0失败
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ok {
      get { return ok_; }
      set {
        ok_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ok != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ok);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ok != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ok);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ok = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class pkgCSPlayerPosReq : pb::IMessage {
    private static readonly pb::MessageParser<pkgCSPlayerPosReq> _parser = new pb::MessageParser<pkgCSPlayerPosReq>(() => new pkgCSPlayerPosReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgCSPlayerPosReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "row" field.</summary>
    public const int RowFieldNumber = 1;
    private int row_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Row {
      get { return row_; }
      set {
        row_ = value;
      }
    }

    /// <summary>Field number for the "col" field.</summary>
    public const int ColFieldNumber = 2;
    private int col_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Col {
      get { return col_; }
      set {
        col_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Row != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Row);
      }
      if (Col != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Col);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Row != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Row);
      }
      if (Col != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Col);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Row = input.ReadInt32();
            break;
          }
          case 16: {
            Col = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class pkgSCPlayerPosRep : pb::IMessage {
    private static readonly pb::MessageParser<pkgSCPlayerPosRep> _parser = new pb::MessageParser<pkgSCPlayerPosRep>(() => new pkgSCPlayerPosRep());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgSCPlayerPosRep> Parser { get { return _parser; } }

    /// <summary>Field number for the "row" field.</summary>
    public const int RowFieldNumber = 1;
    private int row_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Row {
      get { return row_; }
      set {
        row_ = value;
      }
    }

    /// <summary>Field number for the "col" field.</summary>
    public const int ColFieldNumber = 2;
    private int col_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Col {
      get { return col_; }
      set {
        col_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Row != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Row);
      }
      if (Col != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Col);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Row != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Row);
      }
      if (Col != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Col);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Row = input.ReadInt32();
            break;
          }
          case 16: {
            Col = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class pkgSCRooketRep : pb::IMessage {
    private static readonly pb::MessageParser<pkgSCRooketRep> _parser = new pb::MessageParser<pkgSCRooketRep>(() => new pkgSCRooketRep());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgSCRooketRep> Parser { get { return _parser; } }

    /// <summary>Field number for the "direction" field.</summary>
    public const int DirectionFieldNumber = 1;
    private int direction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Direction {
      get { return direction_; }
      set {
        direction_ = value;
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 2;
    private int index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Direction != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Direction);
      }
      if (Index != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Index);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Direction != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Direction);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Direction = input.ReadInt32();
            break;
          }
          case 16: {
            Index = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class pkgCSGameDataResetReq : pb::IMessage {
    private static readonly pb::MessageParser<pkgCSGameDataResetReq> _parser = new pb::MessageParser<pkgCSGameDataResetReq>(() => new pkgCSGameDataResetReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgCSGameDataResetReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "ok" field.</summary>
    public const int OkFieldNumber = 1;
    private int ok_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ok {
      get { return ok_; }
      set {
        ok_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ok != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ok);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ok != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ok);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ok = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class pkgSCGameDataResetRep : pb::IMessage {
    private static readonly pb::MessageParser<pkgSCGameDataResetRep> _parser = new pb::MessageParser<pkgSCGameDataResetRep>(() => new pkgSCGameDataResetRep());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgSCGameDataResetRep> Parser { get { return _parser; } }

    /// <summary>Field number for the "upAndDownSpeed" field.</summary>
    public const int UpAndDownSpeedFieldNumber = 1;
    private int upAndDownSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UpAndDownSpeed {
      get { return upAndDownSpeed_; }
      set {
        upAndDownSpeed_ = value;
      }
    }

    /// <summary>Field number for the "leftAndRightSpeed" field.</summary>
    public const int LeftAndRightSpeedFieldNumber = 2;
    private int leftAndRightSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LeftAndRightSpeed {
      get { return leftAndRightSpeed_; }
      set {
        leftAndRightSpeed_ = value;
      }
    }

    /// <summary>Field number for the "movetime" field.</summary>
    public const int MovetimeFieldNumber = 3;
    private int movetime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Movetime {
      get { return movetime_; }
      set {
        movetime_ = value;
      }
    }

    /// <summary>Field number for the "movespeed" field.</summary>
    public const int MovespeedFieldNumber = 4;
    private int movespeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Movespeed {
      get { return movespeed_; }
      set {
        movespeed_ = value;
      }
    }

    /// <summary>Field number for the "rocketdelay" field.</summary>
    public const int RocketdelayFieldNumber = 5;
    private int rocketdelay_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rocketdelay {
      get { return rocketdelay_; }
      set {
        rocketdelay_ = value;
      }
    }

    /// <summary>Field number for the "row" field.</summary>
    public const int RowFieldNumber = 6;
    private int row_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Row {
      get { return row_; }
      set {
        row_ = value;
      }
    }

    /// <summary>Field number for the "col" field.</summary>
    public const int ColFieldNumber = 7;
    private int col_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Col {
      get { return col_; }
      set {
        col_ = value;
      }
    }

    /// <summary>Field number for the "otherRow" field.</summary>
    public const int OtherRowFieldNumber = 8;
    private int otherRow_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OtherRow {
      get { return otherRow_; }
      set {
        otherRow_ = value;
      }
    }

    /// <summary>Field number for the "otherCol" field.</summary>
    public const int OtherColFieldNumber = 9;
    private int otherCol_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OtherCol {
      get { return otherCol_; }
      set {
        otherCol_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UpAndDownSpeed != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UpAndDownSpeed);
      }
      if (LeftAndRightSpeed != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(LeftAndRightSpeed);
      }
      if (Movetime != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Movetime);
      }
      if (Movespeed != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Movespeed);
      }
      if (Rocketdelay != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Rocketdelay);
      }
      if (Row != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Row);
      }
      if (Col != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Col);
      }
      if (OtherRow != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(OtherRow);
      }
      if (OtherCol != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(OtherCol);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UpAndDownSpeed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UpAndDownSpeed);
      }
      if (LeftAndRightSpeed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LeftAndRightSpeed);
      }
      if (Movetime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Movetime);
      }
      if (Movespeed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Movespeed);
      }
      if (Rocketdelay != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rocketdelay);
      }
      if (Row != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Row);
      }
      if (Col != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Col);
      }
      if (OtherRow != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OtherRow);
      }
      if (OtherCol != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OtherCol);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UpAndDownSpeed = input.ReadInt32();
            break;
          }
          case 16: {
            LeftAndRightSpeed = input.ReadInt32();
            break;
          }
          case 24: {
            Movetime = input.ReadInt32();
            break;
          }
          case 32: {
            Movespeed = input.ReadInt32();
            break;
          }
          case 40: {
            Rocketdelay = input.ReadInt32();
            break;
          }
          case 48: {
            Row = input.ReadInt32();
            break;
          }
          case 56: {
            Col = input.ReadInt32();
            break;
          }
          case 64: {
            OtherRow = input.ReadInt32();
            break;
          }
          case 72: {
            OtherCol = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
