// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pro_data.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Protocol {

  #region Enums
  public enum ProtocolCmd {
    None = 0,
    /// <summary>
    ///请求加入房间
    /// </summary>
    CsjoinRoom = 1001,
    /// <summary>
    ///请求加入房间
    /// </summary>
    ScjoinRoom = 2001,
    /// <summary>
    ///心跳协议请求
    /// </summary>
    CsheartBeat = 1002,
    /// <summary>
    ///心跳协议请求		
    /// </summary>
    ScheartBeat = 2002,
    /// <summary>
    ///获取服务器时间
    /// </summary>
    CsgetServerLocalTime = 1003,
    /// <summary>
    ///获取服务器时间返回	
    /// </summary>
    ScgetServerLocalTime = 2003,
  }

  #endregion

  #region Messages
  /// <summary>
  ///登陆
  /// </summary>
  public sealed class pkgCSJoinRoom : pb::IMessage {
    private static readonly pb::MessageParser<pkgCSJoinRoom> _parser = new pb::MessageParser<pkgCSJoinRoom>(() => new pkgCSJoinRoom());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgCSJoinRoom> Parser { get { return _parser; } }

    /// <summary>Field number for the "roomid" field.</summary>
    public const int RoomidFieldNumber = 1;
    private long roomid_;
    /// <summary>
    ///房间id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Roomid {
      get { return roomid_; }
      set {
        roomid_ = value;
      }
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 2;
    private int userId_;
    /// <summary>
    ///玩家id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 3;
    private string token_ = "";
    /// <summary>
    ///玩家toten
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Roomid != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Roomid);
      }
      if (UserId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(UserId);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Token);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Roomid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Roomid);
      }
      if (UserId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserId);
      }
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Roomid = input.ReadInt64();
            break;
          }
          case 16: {
            UserId = input.ReadInt32();
            break;
          }
          case 26: {
            Token = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed class pkgSCJoinRoom : pb::IMessage {
    private static readonly pb::MessageParser<pkgSCJoinRoom> _parser = new pb::MessageParser<pkgSCJoinRoom>(() => new pkgSCJoinRoom());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgSCJoinRoom> Parser { get { return _parser; } }

    /// <summary>Field number for the "ok" field.</summary>
    public const int OkFieldNumber = 1;
    private int ok_;
    /// <summary>
    ///1成功 0失败
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ok {
      get { return ok_; }
      set {
        ok_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ok != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ok);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ok != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ok);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ok = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///地图
  /// </summary>
  public sealed class pkgWorldData : pb::IMessage {
    private static readonly pb::MessageParser<pkgWorldData> _parser = new pb::MessageParser<pkgWorldData>(() => new pkgWorldData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgWorldData> Parser { get { return _parser; } }

    /// <summary>Field number for the "x_add" field.</summary>
    public const int XAddFieldNumber = 1;
    private int xAdd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int XAdd {
      get { return xAdd_; }
      set {
        xAdd_ = value;
      }
    }

    /// <summary>Field number for the "z_add" field.</summary>
    public const int ZAddFieldNumber = 2;
    private int zAdd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ZAdd {
      get { return zAdd_; }
      set {
        zAdd_ = value;
      }
    }

    /// <summary>Field number for the "x_max" field.</summary>
    public const int XMaxFieldNumber = 3;
    private int xMax_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int XMax {
      get { return xMax_; }
      set {
        xMax_ = value;
      }
    }

    /// <summary>Field number for the "z_max" field.</summary>
    public const int ZMaxFieldNumber = 4;
    private int zMax_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ZMax {
      get { return zMax_; }
      set {
        zMax_ = value;
      }
    }

    /// <summary>Field number for the "datas" field.</summary>
    public const int DatasFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Protocol.pkgCell> _repeated_datas_codec
        = pb::FieldCodec.ForMessage(42, global::Protocol.pkgCell.Parser);
    private readonly pbc::RepeatedField<global::Protocol.pkgCell> datas_ = new pbc::RepeatedField<global::Protocol.pkgCell>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.pkgCell> Datas {
      get { return datas_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (XAdd != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(XAdd);
      }
      if (ZAdd != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ZAdd);
      }
      if (XMax != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(XMax);
      }
      if (ZMax != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ZMax);
      }
      datas_.WriteTo(output, _repeated_datas_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (XAdd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(XAdd);
      }
      if (ZAdd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ZAdd);
      }
      if (XMax != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(XMax);
      }
      if (ZMax != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ZMax);
      }
      size += datas_.CalculateSize(_repeated_datas_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            XAdd = input.ReadInt32();
            break;
          }
          case 16: {
            ZAdd = input.ReadInt32();
            break;
          }
          case 24: {
            XMax = input.ReadInt32();
            break;
          }
          case 32: {
            ZMax = input.ReadInt32();
            break;
          }
          case 42: {
            datas_.AddEntriesFrom(input, _repeated_datas_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class pkgCell : pb::IMessage {
    private static readonly pb::MessageParser<pkgCell> _parser = new pb::MessageParser<pkgCell>(() => new pkgCell());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgCell> Parser { get { return _parser; } }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 1;
    private int state_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 2;
    private int position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (State != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(State);
      }
      if (Position != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Position);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
      }
      if (Position != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Position);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            State = input.ReadInt32();
            break;
          }
          case 16: {
            Position = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///时间同步
  /// </summary>
  public sealed class pkgCSGetServerLocalTime : pb::IMessage {
    private static readonly pb::MessageParser<pkgCSGetServerLocalTime> _parser = new pb::MessageParser<pkgCSGetServerLocalTime>(() => new pkgCSGetServerLocalTime());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgCSGetServerLocalTime> Parser { get { return _parser; } }

    /// <summary>Field number for the "client_times" field.</summary>
    public const int ClientTimesFieldNumber = 1;
    private long clientTimes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ClientTimes {
      get { return clientTimes_; }
      set {
        clientTimes_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClientTimes != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ClientTimes);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClientTimes != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ClientTimes);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ClientTimes = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class pkgSCGetServerLocalTime : pb::IMessage {
    private static readonly pb::MessageParser<pkgSCGetServerLocalTime> _parser = new pb::MessageParser<pkgSCGetServerLocalTime>(() => new pkgSCGetServerLocalTime());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgSCGetServerLocalTime> Parser { get { return _parser; } }

    /// <summary>Field number for the "client_times" field.</summary>
    public const int ClientTimesFieldNumber = 1;
    private long clientTimes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ClientTimes {
      get { return clientTimes_; }
      set {
        clientTimes_ = value;
      }
    }

    /// <summary>Field number for the "server_tiems" field.</summary>
    public const int ServerTiemsFieldNumber = 2;
    private long serverTiems_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ServerTiems {
      get { return serverTiems_; }
      set {
        serverTiems_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClientTimes != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ClientTimes);
      }
      if (ServerTiems != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(ServerTiems);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClientTimes != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ClientTimes);
      }
      if (ServerTiems != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ServerTiems);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ClientTimes = input.ReadInt64();
            break;
          }
          case 16: {
            ServerTiems = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
