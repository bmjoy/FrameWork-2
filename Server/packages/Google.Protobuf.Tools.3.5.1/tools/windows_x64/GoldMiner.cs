// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: GoldMiner.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Protocol {

  /// <summary>Holder for reflection information generated from GoldMiner.proto</summary>
  public static partial class GoldMinerReflection {

    #region Descriptor
    /// <summary>File descriptor for GoldMiner.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GoldMinerReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9Hb2xkTWluZXIucHJvdG8SCFByb3RvY29sIk4KBk1hcFJlcxIJCgF4GAEg",
            "ASgFEgkKAXkYAiABKAUSEAoIcmVzX3R5cGUYAyABKAUSDQoFc3BlZWQYBCAB",
            "KAUSDQoFc29jcmUYBSABKAUiQgoQcGtnQ1NKb2luUm9vbVJlcRIPCgdpcm9v",
            "bWlkGAEgASgDEg4KBnVzZXJJZBgCIAEoBRINCgV0b2tlbhgDIAEoCSIeChBw",
            "a2dTQ0pvaW5Sb29tUmVwEgoKAm9rGAEgASgFIiQKFHBrZ0NTUHJvZ3Jlc3NS",
            "YXRlUmVxEgwKBHJhdGUYASABKAUiNAoUcGtnU0NQcm9ncmVzc1JhdGVSZXAS",
            "DAoEcmF0ZRgBIAEoBRIOCgZ1c2VyaWQYAiABKAUiHwoRcGtnU0NHYW1lU3Rh",
            "cnRSZXASCgoCb2sYASABKAMiHgoQcGtnU0NHYW1lT3ZlclJlcBIKCgJvaxgB",
            "IAEoBSIcCg5wa2dDU0xvZ091dFJlcRIKCgJvaxgBIAEoBSIcCg5wa2dTQ0xv",
            "Z091dFJlcBIKCgJvaxgBIAEoBSIfChFwa2dDU0hlYXJ0QmVhdFJlcRIKCgJv",
            "axgBIAEoBSIjChFwa2dTQ0hlYXJ0QmVhdFJlcBIOCgZpdGltZXMYASABKAUi",
            "IAoScGtnQ1NBUm91bmRPdmVyUmVxEgoKAm9rGAEgASgFIiAKEnBrZ1NDQVJv",
            "dW5kT3ZlclJlcBIKCgJvaxgBIAEoBSIyChpwa2dDU0dldFNlcnZlckxvY2Fs",
            "VGltZVJlcRIUCgxjbGllbnRfdGltZXMYASABKAMiSAoacGtnU0NHZXRTZXJ2",
            "ZXJMb2NhbFRpbWVSZXASFAoMY2xpZW50X3RpbWVzGAEgASgDEhQKDHNlcnZl",
            "cl90aWVtcxgCIAEoAyIlChZwa2dDU0dldFRpcHNDb250ZW50UmVxEgsKA3Jl",
            "cRgBIAEoBSImChZwa2dTQ0dldFRpcHNDb250ZW50UmVwEgwKBHRpcHMYASAB",
            "KAkiIAoScGtnQ1NHYW1lQ29uZmlnUmVxEgoKAmlkGAEgASgFIusBChJwa2dT",
            "Q0dhbWVDb25maWdSZXASEAoIcG9zaXRpb24YASABKAUSDQoFQW5nbGUYAiAB",
            "KAUSGQoRSG9va1JvdGF0aW9uU3BlZWQYAyABKAUSFAoMSG9va1J1blNwZWVk",
            "GAQgASgFEhsKE1BsYXllcjFTdGFydFJvdGFpb24YBSABKAUSGwoTUGxheWVy",
            "MlN0YXJ0Um90YWlvbhgGIAEoBRIVCg1Ib29rTWF4TGVuZ3RoGAcgASgFEiAK",
            "Bm1hcHJlcxgIIAMoCzIQLlByb3RvY29sLk1hcFJlcxIQCghMaWZlVGltZRgJ",
            "IAEoBSIkCgxwa2dTQ0dhbWVSdW4SFAoMc2VydmVyX3RpZW1zGAEgASgDIj0K",
            "DHBrZ0l0ZW1TdGF0ZRIKCgJpZBgBIAEoBRISCgpzdGFydF90aW1lGAIgASgD",
            "Eg0KBXN0YXRlGAMgASgFIssCChBwa2dDU1VwSG9va1N0YXRlEg4KBnBsYXll",
            "chgBIAEoBRISCgpzdGFydF90aW1lGAIgASgDEg0KBXN0YXRlGAMgASgFEgkK",
            "AXgYBCABKAUSCQoBeRgFIAEoBRIPCgdyb3RhaW9uGAYgASgFEhAKCGhpdF9v",
            "YmoxGAcgASgFEhUKDWhpdF9vYmoxX3RpbWUYCCABKAMSEAoIaGl0X29iajIY",
            "CSABKAUSFQoNaGl0X29iajJfdGltZRgKIAEoAxIUCgxzcGVlZF9idWZmZXIY",
            "CyABKAUSFwoPY3VycmVudF9zcGVlZF94GAwgASgFEhcKD2N1cnJlbnRfc3Bl",
            "ZWRfeRgNIAEoBRIQCghidG4xX29iahgOIAEoBRIQCghidG4yX29iahgPIAEo",
            "BRIfChdzcGVlZF9idWZmZXJfc3RhcnRfdGltZRgQIAEoAyLDAgoOcGtnU0NI",
            "b29rU3RhdGUSDgoGcGxheWVyGAEgASgFEhIKCnN0YXJ0X3RpbWUYAiABKAMS",
            "DQoFc3RhdGUYAyABKAUSCQoBeBgEIAEoBRIJCgF5GAUgASgFEg8KB3JvdGFp",
            "b24YBiABKAUSFAoMcm90YWlvbl9uZXh0GAcgASgFEg8KB2hpdF9vYmoYCCAB",
            "KAUSFQoNaGl0X29iajFfdGltZRgJIAEoAxIUCgxzcGVlZF9idWZmZXIYCiAB",
            "KAUSFwoPY3VycmVudF9zcGVlZF94GAsgASgFEhcKD2N1cnJlbnRfc3BlZWRf",
            "eRgMIAEoBRIQCghidG4xX29iahgNIAEoBRIQCghidG4yX29iahgOIAEoBRIf",
            "ChdzcGVlZF9idWZmZXJfc3RhcnRfdGltZRgPIAEoAxIMCgR0eXBlGBAgASgD",
            "IocBCgxwa2dEb3duU3RhdGUSKwoJSG9va1N0YXRlGAEgAygLMhguUHJvdG9j",
            "b2wucGtnU0NIb29rU3RhdGUSKgoKSXRlbVN0YXRlcxgCIAMoCzIWLlByb3Rv",
            "Y29sLnBrZ0l0ZW1TdGF0ZRIOCgZzY29yZTEYAyABKAUSDgoGc2NvcmUyGAQg",
            "ASgFIj4KGnBrZ1NDU3RhZ2VDcmVhdGVOb3RlaWNlUmVwEiAKBm1hcHJlcxgB",
            "IAMoCzIQLlByb3RvY29sLk1hcFJlcyrqAwoLUHJvdG9jb2xDbWQSCAoETm9u",
            "ZRAAEhAKC0NTTG9nT3V0UmVxEOsHEhAKC1NDTG9nT3V0UmVwEOwHEhMKDkNT",
            "SGVhcnRCZWF0UmVxEPIHEhMKDlNDSGVhcnRCZWF0UmVwEPMHEhQKD0NTQVJv",
            "dW5kT3ZlclJlcRD0BxIUCg9TQ0FSb3VuZE92ZXJSZXAQ9QcSEgoNQ1NKb2lu",
            "Um9vbVJlcRD4BxISCg1TQ0pvaW5Sb29tUmVwEPkHEhYKEUNTUHJvZ3Jlc3NS",
            "YXRlUmVxEP0HEhYKEVNDUHJvZ3Jlc3NSYXRlUmVwEP4HEhMKDlNDR2FtZVN0",
            "YXJ0UmVwEP8HEhwKF0NTR2V0U2VydmVyTG9jYWxUaW1lUmVxEM0IEhwKF1ND",
            "R2V0U2VydmVyTG9jYWxUaW1lUmVwEM4IEhgKE0NTR2V0VGlwc0NvbnRlbnRS",
            "ZXEQuAgSGAoTU0NHZXRUaXBzQ29udGVudFJlcBC5CBIUCg9DU0dhbWVDb25m",
            "aWdSZXEQ/wgSFAoPU0NHYW1lQ29uZmlnUmVwEIAJEg4KCVNDR2FtZVJ1bhCJ",
            "CRIOCglDU1VwU3RhdGUQkwkSEAoLU0NEb3duU3RhdGUQlAkSHAoXU0NTdGFn",
            "ZUNyZWF0ZU5vdGVpY2VSZXAQngkqLQoIRVJST0NPREUSEQoNRVJST0NPREVf",
            "Tk9ORRAAEg4KClNVQ0NFU1NGVUwQAWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Protocol.ProtocolCmd), typeof(global::Protocol.ERROCODE), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.MapRes), global::Protocol.MapRes.Parser, new[]{ "X", "Y", "ResType", "Speed", "Socre" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.pkgCSJoinRoomReq), global::Protocol.pkgCSJoinRoomReq.Parser, new[]{ "Iroomid", "UserId", "Token" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.pkgSCJoinRoomRep), global::Protocol.pkgSCJoinRoomRep.Parser, new[]{ "Ok" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.pkgCSProgressRateReq), global::Protocol.pkgCSProgressRateReq.Parser, new[]{ "Rate" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.pkgSCProgressRateRep), global::Protocol.pkgSCProgressRateRep.Parser, new[]{ "Rate", "Userid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.pkgSCGameStartRep), global::Protocol.pkgSCGameStartRep.Parser, new[]{ "Ok" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.pkgSCGameOverRep), global::Protocol.pkgSCGameOverRep.Parser, new[]{ "Ok" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.pkgCSLogOutReq), global::Protocol.pkgCSLogOutReq.Parser, new[]{ "Ok" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.pkgSCLogOutRep), global::Protocol.pkgSCLogOutRep.Parser, new[]{ "Ok" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.pkgCSHeartBeatReq), global::Protocol.pkgCSHeartBeatReq.Parser, new[]{ "Ok" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.pkgSCHeartBeatRep), global::Protocol.pkgSCHeartBeatRep.Parser, new[]{ "Itimes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.pkgCSARoundOverReq), global::Protocol.pkgCSARoundOverReq.Parser, new[]{ "Ok" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.pkgSCARoundOverRep), global::Protocol.pkgSCARoundOverRep.Parser, new[]{ "Ok" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.pkgCSGetServerLocalTimeReq), global::Protocol.pkgCSGetServerLocalTimeReq.Parser, new[]{ "ClientTimes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.pkgSCGetServerLocalTimeRep), global::Protocol.pkgSCGetServerLocalTimeRep.Parser, new[]{ "ClientTimes", "ServerTiems" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.pkgCSGetTipsContentReq), global::Protocol.pkgCSGetTipsContentReq.Parser, new[]{ "Req" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.pkgSCGetTipsContentRep), global::Protocol.pkgSCGetTipsContentRep.Parser, new[]{ "Tips" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.pkgCSGameConfigReq), global::Protocol.pkgCSGameConfigReq.Parser, new[]{ "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.pkgSCGameConfigRep), global::Protocol.pkgSCGameConfigRep.Parser, new[]{ "Position", "Angle", "HookRotationSpeed", "HookRunSpeed", "Player1StartRotaion", "Player2StartRotaion", "HookMaxLength", "Mapres", "LifeTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.pkgSCGameRun), global::Protocol.pkgSCGameRun.Parser, new[]{ "ServerTiems" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.pkgItemState), global::Protocol.pkgItemState.Parser, new[]{ "Id", "StartTime", "State" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.pkgCSUpHookState), global::Protocol.pkgCSUpHookState.Parser, new[]{ "Player", "StartTime", "State", "X", "Y", "Rotaion", "HitObj1", "HitObj1Time", "HitObj2", "HitObj2Time", "SpeedBuffer", "CurrentSpeedX", "CurrentSpeedY", "Btn1Obj", "Btn2Obj", "SpeedBufferStartTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.pkgSCHookState), global::Protocol.pkgSCHookState.Parser, new[]{ "Player", "StartTime", "State", "X", "Y", "Rotaion", "RotaionNext", "HitObj", "HitObj1Time", "SpeedBuffer", "CurrentSpeedX", "CurrentSpeedY", "Btn1Obj", "Btn2Obj", "SpeedBufferStartTime", "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.pkgDownState), global::Protocol.pkgDownState.Parser, new[]{ "HookState", "ItemStates", "Score1", "Score2" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.pkgSCStageCreateNoteiceRep), global::Protocol.pkgSCStageCreateNoteiceRep.Parser, new[]{ "Mapres" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum ProtocolCmd {
    [pbr::OriginalName("None")] None = 0,
    /// <summary>
    ///===通用
    /// </summary>
    [pbr::OriginalName("CSLogOutReq")] CslogOutReq = 1003,
    /// <summary>
    ///退出
    /// </summary>
    [pbr::OriginalName("SCLogOutRep")] SclogOutRep = 1004,
    /// <summary>
    ///心跳协议请求
    /// </summary>
    [pbr::OriginalName("CSHeartBeatReq")] CsheartBeatReq = 1010,
    /// <summary>
    ///心跳协议请求
    /// </summary>
    [pbr::OriginalName("SCHeartBeatRep")] ScheartBeatRep = 1011,
    /// <summary>
    ///一盘游戏结束
    /// </summary>
    [pbr::OriginalName("CSARoundOverReq")] CsaroundOverReq = 1012,
    /// <summary>
    ///一盘游戏结束
    /// </summary>
    [pbr::OriginalName("SCARoundOverRep")] ScaroundOverRep = 1013,
    /// <summary>
    ///请求加入房间
    /// </summary>
    [pbr::OriginalName("CSJoinRoomReq")] CsjoinRoomReq = 1016,
    /// <summary>
    ///请求加入房间
    /// </summary>
    [pbr::OriginalName("SCJoinRoomRep")] ScjoinRoomRep = 1017,
    /// <summary>
    ///加载进度
    /// </summary>
    [pbr::OriginalName("CSProgressRateReq")] CsprogressRateReq = 1021,
    /// <summary>
    ///加载进度
    /// </summary>
    [pbr::OriginalName("SCProgressRateRep")] ScprogressRateRep = 1022,
    /// <summary>
    ///游戏开始
    /// </summary>
    [pbr::OriginalName("SCGameStartRep")] ScgameStartRep = 1023,
    /// <summary>
    ///获取服务器时间
    /// </summary>
    [pbr::OriginalName("CSGetServerLocalTimeReq")] CsgetServerLocalTimeReq = 1101,
    /// <summary>
    ///获取服务器时间返回	
    /// </summary>
    [pbr::OriginalName("SCGetServerLocalTimeRep")] ScgetServerLocalTimeRep = 1102,
    /// <summary>
    ///获取游戏提示
    /// </summary>
    [pbr::OriginalName("CSGetTipsContentReq")] CsgetTipsContentReq = 1080,
    /// <summary>
    ///获取游戏提示	
    /// </summary>
    [pbr::OriginalName("SCGetTipsContentRep")] ScgetTipsContentRep = 1081,
    /// <summary>
    ///=========
    /// </summary>
    [pbr::OriginalName("CSGameConfigReq")] CsgameConfigReq = 1151,
    /// <summary>
    ///返回游戏配置
    /// </summary>
    [pbr::OriginalName("SCGameConfigRep")] ScgameConfigRep = 1152,
    /// <summary>
    ///返回游戏正式开始
    /// </summary>
    [pbr::OriginalName("SCGameRun")] ScgameRun = 1161,
    /// <summary>
    ///=========
    /// </summary>
    [pbr::OriginalName("CSUpState")] CsupState = 1171,
    /// <summary>
    ///服务器下发状态改变
    /// </summary>
    [pbr::OriginalName("SCDownState")] ScdownState = 1172,
    [pbr::OriginalName("SCStageCreateNoteiceRep")] ScstageCreateNoteiceRep = 1182,
  }

  public enum ERROCODE {
    [pbr::OriginalName("ERROCODE_NONE")] None = 0,
    [pbr::OriginalName("SUCCESSFUL")] Successful = 1,
  }

  #endregion

  #region Messages
  public sealed partial class MapRes : pb::IMessage<MapRes> {
    private static readonly pb::MessageParser<MapRes> _parser = new pb::MessageParser<MapRes>(() => new MapRes());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MapRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.GoldMinerReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapRes(MapRes other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      resType_ = other.resType_;
      speed_ = other.speed_;
      socre_ = other.socre_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapRes Clone() {
      return new MapRes(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private int x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private int y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "res_type" field.</summary>
    public const int ResTypeFieldNumber = 3;
    private int resType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ResType {
      get { return resType_; }
      set {
        resType_ = value;
      }
    }

    /// <summary>Field number for the "speed" field.</summary>
    public const int SpeedFieldNumber = 4;
    private int speed_;
    /// <summary>
    ///速度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }

    /// <summary>Field number for the "socre" field.</summary>
    public const int SocreFieldNumber = 5;
    private int socre_;
    /// <summary>
    ///分数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Socre {
      get { return socre_; }
      set {
        socre_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MapRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MapRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (ResType != other.ResType) return false;
      if (Speed != other.Speed) return false;
      if (Socre != other.Socre) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0) hash ^= X.GetHashCode();
      if (Y != 0) hash ^= Y.GetHashCode();
      if (ResType != 0) hash ^= ResType.GetHashCode();
      if (Speed != 0) hash ^= Speed.GetHashCode();
      if (Socre != 0) hash ^= Socre.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(X);
      }
      if (Y != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Y);
      }
      if (ResType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ResType);
      }
      if (Speed != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Speed);
      }
      if (Socre != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Socre);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
      }
      if (Y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Y);
      }
      if (ResType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ResType);
      }
      if (Speed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Speed);
      }
      if (Socre != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Socre);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MapRes other) {
      if (other == null) {
        return;
      }
      if (other.X != 0) {
        X = other.X;
      }
      if (other.Y != 0) {
        Y = other.Y;
      }
      if (other.ResType != 0) {
        ResType = other.ResType;
      }
      if (other.Speed != 0) {
        Speed = other.Speed;
      }
      if (other.Socre != 0) {
        Socre = other.Socre;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            X = input.ReadInt32();
            break;
          }
          case 16: {
            Y = input.ReadInt32();
            break;
          }
          case 24: {
            ResType = input.ReadInt32();
            break;
          }
          case 32: {
            Speed = input.ReadInt32();
            break;
          }
          case 40: {
            Socre = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///===通用
  /// </summary>
  public sealed partial class pkgCSJoinRoomReq : pb::IMessage<pkgCSJoinRoomReq> {
    private static readonly pb::MessageParser<pkgCSJoinRoomReq> _parser = new pb::MessageParser<pkgCSJoinRoomReq>(() => new pkgCSJoinRoomReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgCSJoinRoomReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.GoldMinerReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pkgCSJoinRoomReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pkgCSJoinRoomReq(pkgCSJoinRoomReq other) : this() {
      iroomid_ = other.iroomid_;
      userId_ = other.userId_;
      token_ = other.token_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pkgCSJoinRoomReq Clone() {
      return new pkgCSJoinRoomReq(this);
    }

    /// <summary>Field number for the "iroomid" field.</summary>
    public const int IroomidFieldNumber = 1;
    private long iroomid_;
    /// <summary>
    ///房间号 玩家id在消息头种赋值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Iroomid {
      get { return iroomid_; }
      set {
        iroomid_ = value;
      }
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 2;
    private int userId_;
    /// <summary>
    ///玩家id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 3;
    private string token_ = "";
    /// <summary>
    ///玩家toten
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as pkgCSJoinRoomReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(pkgCSJoinRoomReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Iroomid != other.Iroomid) return false;
      if (UserId != other.UserId) return false;
      if (Token != other.Token) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Iroomid != 0L) hash ^= Iroomid.GetHashCode();
      if (UserId != 0) hash ^= UserId.GetHashCode();
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Iroomid != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Iroomid);
      }
      if (UserId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(UserId);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Token);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Iroomid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Iroomid);
      }
      if (UserId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserId);
      }
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pkgCSJoinRoomReq other) {
      if (other == null) {
        return;
      }
      if (other.Iroomid != 0L) {
        Iroomid = other.Iroomid;
      }
      if (other.UserId != 0) {
        UserId = other.UserId;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Iroomid = input.ReadInt64();
            break;
          }
          case 16: {
            UserId = input.ReadInt32();
            break;
          }
          case 26: {
            Token = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class pkgSCJoinRoomRep : pb::IMessage<pkgSCJoinRoomRep> {
    private static readonly pb::MessageParser<pkgSCJoinRoomRep> _parser = new pb::MessageParser<pkgSCJoinRoomRep>(() => new pkgSCJoinRoomRep());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgSCJoinRoomRep> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.GoldMinerReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pkgSCJoinRoomRep() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pkgSCJoinRoomRep(pkgSCJoinRoomRep other) : this() {
      ok_ = other.ok_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pkgSCJoinRoomRep Clone() {
      return new pkgSCJoinRoomRep(this);
    }

    /// <summary>Field number for the "ok" field.</summary>
    public const int OkFieldNumber = 1;
    private int ok_;
    /// <summary>
    ///1成功 0失败
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ok {
      get { return ok_; }
      set {
        ok_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as pkgSCJoinRoomRep);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(pkgSCJoinRoomRep other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ok != other.Ok) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ok != 0) hash ^= Ok.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ok != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ok);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ok != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ok);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pkgSCJoinRoomRep other) {
      if (other == null) {
        return;
      }
      if (other.Ok != 0) {
        Ok = other.Ok;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Ok = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class pkgCSProgressRateReq : pb::IMessage<pkgCSProgressRateReq> {
    private static readonly pb::MessageParser<pkgCSProgressRateReq> _parser = new pb::MessageParser<pkgCSProgressRateReq>(() => new pkgCSProgressRateReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgCSProgressRateReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.GoldMinerReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pkgCSProgressRateReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pkgCSProgressRateReq(pkgCSProgressRateReq other) : this() {
      rate_ = other.rate_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pkgCSProgressRateReq Clone() {
      return new pkgCSProgressRateReq(this);
    }

    /// <summary>Field number for the "rate" field.</summary>
    public const int RateFieldNumber = 1;
    private int rate_;
    /// <summary>
    ///0到100
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rate {
      get { return rate_; }
      set {
        rate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as pkgCSProgressRateReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(pkgCSProgressRateReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Rate != other.Rate) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Rate != 0) hash ^= Rate.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Rate != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Rate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Rate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rate);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pkgCSProgressRateReq other) {
      if (other == null) {
        return;
      }
      if (other.Rate != 0) {
        Rate = other.Rate;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Rate = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class pkgSCProgressRateRep : pb::IMessage<pkgSCProgressRateRep> {
    private static readonly pb::MessageParser<pkgSCProgressRateRep> _parser = new pb::MessageParser<pkgSCProgressRateRep>(() => new pkgSCProgressRateRep());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgSCProgressRateRep> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.GoldMinerReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pkgSCProgressRateRep() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pkgSCProgressRateRep(pkgSCProgressRateRep other) : this() {
      rate_ = other.rate_;
      userid_ = other.userid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pkgSCProgressRateRep Clone() {
      return new pkgSCProgressRateRep(this);
    }

    /// <summary>Field number for the "rate" field.</summary>
    public const int RateFieldNumber = 1;
    private int rate_;
    /// <summary>
    ///0到100
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rate {
      get { return rate_; }
      set {
        rate_ = value;
      }
    }

    /// <summary>Field number for the "userid" field.</summary>
    public const int UseridFieldNumber = 2;
    private int userid_;
    /// <summary>
    ///玩家id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Userid {
      get { return userid_; }
      set {
        userid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as pkgSCProgressRateRep);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(pkgSCProgressRateRep other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Rate != other.Rate) return false;
      if (Userid != other.Userid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Rate != 0) hash ^= Rate.GetHashCode();
      if (Userid != 0) hash ^= Userid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Rate != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Rate);
      }
      if (Userid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Userid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Rate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rate);
      }
      if (Userid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Userid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pkgSCProgressRateRep other) {
      if (other == null) {
        return;
      }
      if (other.Rate != 0) {
        Rate = other.Rate;
      }
      if (other.Userid != 0) {
        Userid = other.Userid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Rate = input.ReadInt32();
            break;
          }
          case 16: {
            Userid = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class pkgSCGameStartRep : pb::IMessage<pkgSCGameStartRep> {
    private static readonly pb::MessageParser<pkgSCGameStartRep> _parser = new pb::MessageParser<pkgSCGameStartRep>(() => new pkgSCGameStartRep());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgSCGameStartRep> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.GoldMinerReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pkgSCGameStartRep() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pkgSCGameStartRep(pkgSCGameStartRep other) : this() {
      ok_ = other.ok_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pkgSCGameStartRep Clone() {
      return new pkgSCGameStartRep(this);
    }

    /// <summary>Field number for the "ok" field.</summary>
    public const int OkFieldNumber = 1;
    private long ok_;
    /// <summary>
    ///任意值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Ok {
      get { return ok_; }
      set {
        ok_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as pkgSCGameStartRep);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(pkgSCGameStartRep other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ok != other.Ok) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ok != 0L) hash ^= Ok.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ok != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Ok);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ok != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Ok);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pkgSCGameStartRep other) {
      if (other == null) {
        return;
      }
      if (other.Ok != 0L) {
        Ok = other.Ok;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Ok = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class pkgSCGameOverRep : pb::IMessage<pkgSCGameOverRep> {
    private static readonly pb::MessageParser<pkgSCGameOverRep> _parser = new pb::MessageParser<pkgSCGameOverRep>(() => new pkgSCGameOverRep());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgSCGameOverRep> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.GoldMinerReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pkgSCGameOverRep() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pkgSCGameOverRep(pkgSCGameOverRep other) : this() {
      ok_ = other.ok_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pkgSCGameOverRep Clone() {
      return new pkgSCGameOverRep(this);
    }

    /// <summary>Field number for the "ok" field.</summary>
    public const int OkFieldNumber = 1;
    private int ok_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ok {
      get { return ok_; }
      set {
        ok_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as pkgSCGameOverRep);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(pkgSCGameOverRep other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ok != other.Ok) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ok != 0) hash ^= Ok.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ok != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ok);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ok != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ok);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pkgSCGameOverRep other) {
      if (other == null) {
        return;
      }
      if (other.Ok != 0) {
        Ok = other.Ok;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Ok = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class pkgCSLogOutReq : pb::IMessage<pkgCSLogOutReq> {
    private static readonly pb::MessageParser<pkgCSLogOutReq> _parser = new pb::MessageParser<pkgCSLogOutReq>(() => new pkgCSLogOutReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgCSLogOutReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.GoldMinerReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pkgCSLogOutReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pkgCSLogOutReq(pkgCSLogOutReq other) : this() {
      ok_ = other.ok_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pkgCSLogOutReq Clone() {
      return new pkgCSLogOutReq(this);
    }

    /// <summary>Field number for the "ok" field.</summary>
    public const int OkFieldNumber = 1;
    private int ok_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ok {
      get { return ok_; }
      set {
        ok_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as pkgCSLogOutReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(pkgCSLogOutReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ok != other.Ok) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ok != 0) hash ^= Ok.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ok != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ok);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ok != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ok);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pkgCSLogOutReq other) {
      if (other == null) {
        return;
      }
      if (other.Ok != 0) {
        Ok = other.Ok;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Ok = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class pkgSCLogOutRep : pb::IMessage<pkgSCLogOutRep> {
    private static readonly pb::MessageParser<pkgSCLogOutRep> _parser = new pb::MessageParser<pkgSCLogOutRep>(() => new pkgSCLogOutRep());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgSCLogOutRep> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.GoldMinerReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pkgSCLogOutRep() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pkgSCLogOutRep(pkgSCLogOutRep other) : this() {
      ok_ = other.ok_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pkgSCLogOutRep Clone() {
      return new pkgSCLogOutRep(this);
    }

    /// <summary>Field number for the "ok" field.</summary>
    public const int OkFieldNumber = 1;
    private int ok_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ok {
      get { return ok_; }
      set {
        ok_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as pkgSCLogOutRep);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(pkgSCLogOutRep other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ok != other.Ok) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ok != 0) hash ^= Ok.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ok != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ok);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ok != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ok);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pkgSCLogOutRep other) {
      if (other == null) {
        return;
      }
      if (other.Ok != 0) {
        Ok = other.Ok;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Ok = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class pkgCSHeartBeatReq : pb::IMessage<pkgCSHeartBeatReq> {
    private static readonly pb::MessageParser<pkgCSHeartBeatReq> _parser = new pb::MessageParser<pkgCSHeartBeatReq>(() => new pkgCSHeartBeatReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgCSHeartBeatReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.GoldMinerReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pkgCSHeartBeatReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pkgCSHeartBeatReq(pkgCSHeartBeatReq other) : this() {
      ok_ = other.ok_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pkgCSHeartBeatReq Clone() {
      return new pkgCSHeartBeatReq(this);
    }

    /// <summary>Field number for the "ok" field.</summary>
    public const int OkFieldNumber = 1;
    private int ok_;
    /// <summary>
    ///任意值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ok {
      get { return ok_; }
      set {
        ok_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as pkgCSHeartBeatReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(pkgCSHeartBeatReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ok != other.Ok) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ok != 0) hash ^= Ok.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ok != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ok);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ok != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ok);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pkgCSHeartBeatReq other) {
      if (other == null) {
        return;
      }
      if (other.Ok != 0) {
        Ok = other.Ok;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Ok = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class pkgSCHeartBeatRep : pb::IMessage<pkgSCHeartBeatRep> {
    private static readonly pb::MessageParser<pkgSCHeartBeatRep> _parser = new pb::MessageParser<pkgSCHeartBeatRep>(() => new pkgSCHeartBeatRep());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgSCHeartBeatRep> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.GoldMinerReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pkgSCHeartBeatRep() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pkgSCHeartBeatRep(pkgSCHeartBeatRep other) : this() {
      itimes_ = other.itimes_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pkgSCHeartBeatRep Clone() {
      return new pkgSCHeartBeatRep(this);
    }

    /// <summary>Field number for the "itimes" field.</summary>
    public const int ItimesFieldNumber = 1;
    private int itimes_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Itimes {
      get { return itimes_; }
      set {
        itimes_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as pkgSCHeartBeatRep);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(pkgSCHeartBeatRep other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Itimes != other.Itimes) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Itimes != 0) hash ^= Itimes.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Itimes != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Itimes);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Itimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Itimes);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pkgSCHeartBeatRep other) {
      if (other == null) {
        return;
      }
      if (other.Itimes != 0) {
        Itimes = other.Itimes;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Itimes = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class pkgCSARoundOverReq : pb::IMessage<pkgCSARoundOverReq> {
    private static readonly pb::MessageParser<pkgCSARoundOverReq> _parser = new pb::MessageParser<pkgCSARoundOverReq>(() => new pkgCSARoundOverReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgCSARoundOverReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.GoldMinerReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pkgCSARoundOverReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pkgCSARoundOverReq(pkgCSARoundOverReq other) : this() {
      ok_ = other.ok_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pkgCSARoundOverReq Clone() {
      return new pkgCSARoundOverReq(this);
    }

    /// <summary>Field number for the "ok" field.</summary>
    public const int OkFieldNumber = 1;
    private int ok_;
    /// <summary>
    ///任意值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ok {
      get { return ok_; }
      set {
        ok_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as pkgCSARoundOverReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(pkgCSARoundOverReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ok != other.Ok) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ok != 0) hash ^= Ok.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ok != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ok);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ok != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ok);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pkgCSARoundOverReq other) {
      if (other == null) {
        return;
      }
      if (other.Ok != 0) {
        Ok = other.Ok;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Ok = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class pkgSCARoundOverRep : pb::IMessage<pkgSCARoundOverRep> {
    private static readonly pb::MessageParser<pkgSCARoundOverRep> _parser = new pb::MessageParser<pkgSCARoundOverRep>(() => new pkgSCARoundOverRep());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgSCARoundOverRep> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.GoldMinerReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pkgSCARoundOverRep() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pkgSCARoundOverRep(pkgSCARoundOverRep other) : this() {
      ok_ = other.ok_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pkgSCARoundOverRep Clone() {
      return new pkgSCARoundOverRep(this);
    }

    /// <summary>Field number for the "ok" field.</summary>
    public const int OkFieldNumber = 1;
    private int ok_;
    /// <summary>
    ///任意值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ok {
      get { return ok_; }
      set {
        ok_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as pkgSCARoundOverRep);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(pkgSCARoundOverRep other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ok != other.Ok) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ok != 0) hash ^= Ok.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ok != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ok);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ok != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ok);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pkgSCARoundOverRep other) {
      if (other == null) {
        return;
      }
      if (other.Ok != 0) {
        Ok = other.Ok;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Ok = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class pkgCSGetServerLocalTimeReq : pb::IMessage<pkgCSGetServerLocalTimeReq> {
    private static readonly pb::MessageParser<pkgCSGetServerLocalTimeReq> _parser = new pb::MessageParser<pkgCSGetServerLocalTimeReq>(() => new pkgCSGetServerLocalTimeReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgCSGetServerLocalTimeReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.GoldMinerReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pkgCSGetServerLocalTimeReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pkgCSGetServerLocalTimeReq(pkgCSGetServerLocalTimeReq other) : this() {
      clientTimes_ = other.clientTimes_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pkgCSGetServerLocalTimeReq Clone() {
      return new pkgCSGetServerLocalTimeReq(this);
    }

    /// <summary>Field number for the "client_times" field.</summary>
    public const int ClientTimesFieldNumber = 1;
    private long clientTimes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ClientTimes {
      get { return clientTimes_; }
      set {
        clientTimes_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as pkgCSGetServerLocalTimeReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(pkgCSGetServerLocalTimeReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClientTimes != other.ClientTimes) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClientTimes != 0L) hash ^= ClientTimes.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClientTimes != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ClientTimes);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClientTimes != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ClientTimes);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pkgCSGetServerLocalTimeReq other) {
      if (other == null) {
        return;
      }
      if (other.ClientTimes != 0L) {
        ClientTimes = other.ClientTimes;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ClientTimes = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class pkgSCGetServerLocalTimeRep : pb::IMessage<pkgSCGetServerLocalTimeRep> {
    private static readonly pb::MessageParser<pkgSCGetServerLocalTimeRep> _parser = new pb::MessageParser<pkgSCGetServerLocalTimeRep>(() => new pkgSCGetServerLocalTimeRep());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgSCGetServerLocalTimeRep> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.GoldMinerReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pkgSCGetServerLocalTimeRep() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pkgSCGetServerLocalTimeRep(pkgSCGetServerLocalTimeRep other) : this() {
      clientTimes_ = other.clientTimes_;
      serverTiems_ = other.serverTiems_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pkgSCGetServerLocalTimeRep Clone() {
      return new pkgSCGetServerLocalTimeRep(this);
    }

    /// <summary>Field number for the "client_times" field.</summary>
    public const int ClientTimesFieldNumber = 1;
    private long clientTimes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ClientTimes {
      get { return clientTimes_; }
      set {
        clientTimes_ = value;
      }
    }

    /// <summary>Field number for the "server_tiems" field.</summary>
    public const int ServerTiemsFieldNumber = 2;
    private long serverTiems_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ServerTiems {
      get { return serverTiems_; }
      set {
        serverTiems_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as pkgSCGetServerLocalTimeRep);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(pkgSCGetServerLocalTimeRep other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClientTimes != other.ClientTimes) return false;
      if (ServerTiems != other.ServerTiems) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClientTimes != 0L) hash ^= ClientTimes.GetHashCode();
      if (ServerTiems != 0L) hash ^= ServerTiems.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClientTimes != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ClientTimes);
      }
      if (ServerTiems != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(ServerTiems);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClientTimes != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ClientTimes);
      }
      if (ServerTiems != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ServerTiems);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pkgSCGetServerLocalTimeRep other) {
      if (other == null) {
        return;
      }
      if (other.ClientTimes != 0L) {
        ClientTimes = other.ClientTimes;
      }
      if (other.ServerTiems != 0L) {
        ServerTiems = other.ServerTiems;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ClientTimes = input.ReadInt64();
            break;
          }
          case 16: {
            ServerTiems = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class pkgCSGetTipsContentReq : pb::IMessage<pkgCSGetTipsContentReq> {
    private static readonly pb::MessageParser<pkgCSGetTipsContentReq> _parser = new pb::MessageParser<pkgCSGetTipsContentReq>(() => new pkgCSGetTipsContentReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgCSGetTipsContentReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.GoldMinerReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pkgCSGetTipsContentReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pkgCSGetTipsContentReq(pkgCSGetTipsContentReq other) : this() {
      req_ = other.req_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pkgCSGetTipsContentReq Clone() {
      return new pkgCSGetTipsContentReq(this);
    }

    /// <summary>Field number for the "req" field.</summary>
    public const int ReqFieldNumber = 1;
    private int req_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Req {
      get { return req_; }
      set {
        req_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as pkgCSGetTipsContentReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(pkgCSGetTipsContentReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Req != other.Req) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Req != 0) hash ^= Req.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Req != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Req);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Req != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Req);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pkgCSGetTipsContentReq other) {
      if (other == null) {
        return;
      }
      if (other.Req != 0) {
        Req = other.Req;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Req = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class pkgSCGetTipsContentRep : pb::IMessage<pkgSCGetTipsContentRep> {
    private static readonly pb::MessageParser<pkgSCGetTipsContentRep> _parser = new pb::MessageParser<pkgSCGetTipsContentRep>(() => new pkgSCGetTipsContentRep());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgSCGetTipsContentRep> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.GoldMinerReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pkgSCGetTipsContentRep() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pkgSCGetTipsContentRep(pkgSCGetTipsContentRep other) : this() {
      tips_ = other.tips_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pkgSCGetTipsContentRep Clone() {
      return new pkgSCGetTipsContentRep(this);
    }

    /// <summary>Field number for the "tips" field.</summary>
    public const int TipsFieldNumber = 1;
    private string tips_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Tips {
      get { return tips_; }
      set {
        tips_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as pkgSCGetTipsContentRep);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(pkgSCGetTipsContentRep other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Tips != other.Tips) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Tips.Length != 0) hash ^= Tips.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Tips.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Tips);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Tips.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Tips);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pkgSCGetTipsContentRep other) {
      if (other == null) {
        return;
      }
      if (other.Tips.Length != 0) {
        Tips = other.Tips;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Tips = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class pkgCSGameConfigReq : pb::IMessage<pkgCSGameConfigReq> {
    private static readonly pb::MessageParser<pkgCSGameConfigReq> _parser = new pb::MessageParser<pkgCSGameConfigReq>(() => new pkgCSGameConfigReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgCSGameConfigReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.GoldMinerReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pkgCSGameConfigReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pkgCSGameConfigReq(pkgCSGameConfigReq other) : this() {
      id_ = other.id_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pkgCSGameConfigReq Clone() {
      return new pkgCSGameConfigReq(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as pkgCSGameConfigReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(pkgCSGameConfigReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pkgCSGameConfigReq other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class pkgSCGameConfigRep : pb::IMessage<pkgSCGameConfigRep> {
    private static readonly pb::MessageParser<pkgSCGameConfigRep> _parser = new pb::MessageParser<pkgSCGameConfigRep>(() => new pkgSCGameConfigRep());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgSCGameConfigRep> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.GoldMinerReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pkgSCGameConfigRep() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pkgSCGameConfigRep(pkgSCGameConfigRep other) : this() {
      position_ = other.position_;
      angle_ = other.angle_;
      hookRotationSpeed_ = other.hookRotationSpeed_;
      hookRunSpeed_ = other.hookRunSpeed_;
      player1StartRotaion_ = other.player1StartRotaion_;
      player2StartRotaion_ = other.player2StartRotaion_;
      hookMaxLength_ = other.hookMaxLength_;
      mapres_ = other.mapres_.Clone();
      lifeTime_ = other.lifeTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pkgSCGameConfigRep Clone() {
      return new pkgSCGameConfigRep(this);
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 1;
    private int position_;
    /// <summary>
    ///位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "Angle" field.</summary>
    public const int AngleFieldNumber = 2;
    private int angle_;
    /// <summary>
    ///最大角度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Angle {
      get { return angle_; }
      set {
        angle_ = value;
      }
    }

    /// <summary>Field number for the "HookRotationSpeed" field.</summary>
    public const int HookRotationSpeedFieldNumber = 3;
    private int hookRotationSpeed_;
    /// <summary>
    ///旋转速度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HookRotationSpeed {
      get { return hookRotationSpeed_; }
      set {
        hookRotationSpeed_ = value;
      }
    }

    /// <summary>Field number for the "HookRunSpeed" field.</summary>
    public const int HookRunSpeedFieldNumber = 4;
    private int hookRunSpeed_;
    /// <summary>
    ///空钩速度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HookRunSpeed {
      get { return hookRunSpeed_; }
      set {
        hookRunSpeed_ = value;
      }
    }

    /// <summary>Field number for the "Player1StartRotaion" field.</summary>
    public const int Player1StartRotaionFieldNumber = 5;
    private int player1StartRotaion_;
    /// <summary>
    ///玩家1开始角度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Player1StartRotaion {
      get { return player1StartRotaion_; }
      set {
        player1StartRotaion_ = value;
      }
    }

    /// <summary>Field number for the "Player2StartRotaion" field.</summary>
    public const int Player2StartRotaionFieldNumber = 6;
    private int player2StartRotaion_;
    /// <summary>
    ///玩家2开始角度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Player2StartRotaion {
      get { return player2StartRotaion_; }
      set {
        player2StartRotaion_ = value;
      }
    }

    /// <summary>Field number for the "HookMaxLength" field.</summary>
    public const int HookMaxLengthFieldNumber = 7;
    private int hookMaxLength_;
    /// <summary>
    ///最远飞多长
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HookMaxLength {
      get { return hookMaxLength_; }
      set {
        hookMaxLength_ = value;
      }
    }

    /// <summary>Field number for the "mapres" field.</summary>
    public const int MapresFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Protocol.MapRes> _repeated_mapres_codec
        = pb::FieldCodec.ForMessage(66, global::Protocol.MapRes.Parser);
    private readonly pbc::RepeatedField<global::Protocol.MapRes> mapres_ = new pbc::RepeatedField<global::Protocol.MapRes>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.MapRes> Mapres {
      get { return mapres_; }
    }

    /// <summary>Field number for the "LifeTime" field.</summary>
    public const int LifeTimeFieldNumber = 9;
    private int lifeTime_;
    /// <summary>
    ///加速道具持续时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LifeTime {
      get { return lifeTime_; }
      set {
        lifeTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as pkgSCGameConfigRep);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(pkgSCGameConfigRep other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Position != other.Position) return false;
      if (Angle != other.Angle) return false;
      if (HookRotationSpeed != other.HookRotationSpeed) return false;
      if (HookRunSpeed != other.HookRunSpeed) return false;
      if (Player1StartRotaion != other.Player1StartRotaion) return false;
      if (Player2StartRotaion != other.Player2StartRotaion) return false;
      if (HookMaxLength != other.HookMaxLength) return false;
      if(!mapres_.Equals(other.mapres_)) return false;
      if (LifeTime != other.LifeTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Position != 0) hash ^= Position.GetHashCode();
      if (Angle != 0) hash ^= Angle.GetHashCode();
      if (HookRotationSpeed != 0) hash ^= HookRotationSpeed.GetHashCode();
      if (HookRunSpeed != 0) hash ^= HookRunSpeed.GetHashCode();
      if (Player1StartRotaion != 0) hash ^= Player1StartRotaion.GetHashCode();
      if (Player2StartRotaion != 0) hash ^= Player2StartRotaion.GetHashCode();
      if (HookMaxLength != 0) hash ^= HookMaxLength.GetHashCode();
      hash ^= mapres_.GetHashCode();
      if (LifeTime != 0) hash ^= LifeTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Position != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Position);
      }
      if (Angle != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Angle);
      }
      if (HookRotationSpeed != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(HookRotationSpeed);
      }
      if (HookRunSpeed != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(HookRunSpeed);
      }
      if (Player1StartRotaion != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Player1StartRotaion);
      }
      if (Player2StartRotaion != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Player2StartRotaion);
      }
      if (HookMaxLength != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(HookMaxLength);
      }
      mapres_.WriteTo(output, _repeated_mapres_codec);
      if (LifeTime != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(LifeTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Position != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Position);
      }
      if (Angle != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Angle);
      }
      if (HookRotationSpeed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HookRotationSpeed);
      }
      if (HookRunSpeed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HookRunSpeed);
      }
      if (Player1StartRotaion != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Player1StartRotaion);
      }
      if (Player2StartRotaion != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Player2StartRotaion);
      }
      if (HookMaxLength != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HookMaxLength);
      }
      size += mapres_.CalculateSize(_repeated_mapres_codec);
      if (LifeTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LifeTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pkgSCGameConfigRep other) {
      if (other == null) {
        return;
      }
      if (other.Position != 0) {
        Position = other.Position;
      }
      if (other.Angle != 0) {
        Angle = other.Angle;
      }
      if (other.HookRotationSpeed != 0) {
        HookRotationSpeed = other.HookRotationSpeed;
      }
      if (other.HookRunSpeed != 0) {
        HookRunSpeed = other.HookRunSpeed;
      }
      if (other.Player1StartRotaion != 0) {
        Player1StartRotaion = other.Player1StartRotaion;
      }
      if (other.Player2StartRotaion != 0) {
        Player2StartRotaion = other.Player2StartRotaion;
      }
      if (other.HookMaxLength != 0) {
        HookMaxLength = other.HookMaxLength;
      }
      mapres_.Add(other.mapres_);
      if (other.LifeTime != 0) {
        LifeTime = other.LifeTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Position = input.ReadInt32();
            break;
          }
          case 16: {
            Angle = input.ReadInt32();
            break;
          }
          case 24: {
            HookRotationSpeed = input.ReadInt32();
            break;
          }
          case 32: {
            HookRunSpeed = input.ReadInt32();
            break;
          }
          case 40: {
            Player1StartRotaion = input.ReadInt32();
            break;
          }
          case 48: {
            Player2StartRotaion = input.ReadInt32();
            break;
          }
          case 56: {
            HookMaxLength = input.ReadInt32();
            break;
          }
          case 66: {
            mapres_.AddEntriesFrom(input, _repeated_mapres_codec);
            break;
          }
          case 72: {
            LifeTime = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///游戏正式开始
  /// </summary>
  public sealed partial class pkgSCGameRun : pb::IMessage<pkgSCGameRun> {
    private static readonly pb::MessageParser<pkgSCGameRun> _parser = new pb::MessageParser<pkgSCGameRun>(() => new pkgSCGameRun());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgSCGameRun> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.GoldMinerReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pkgSCGameRun() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pkgSCGameRun(pkgSCGameRun other) : this() {
      serverTiems_ = other.serverTiems_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pkgSCGameRun Clone() {
      return new pkgSCGameRun(this);
    }

    /// <summary>Field number for the "server_tiems" field.</summary>
    public const int ServerTiemsFieldNumber = 1;
    private long serverTiems_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ServerTiems {
      get { return serverTiems_; }
      set {
        serverTiems_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as pkgSCGameRun);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(pkgSCGameRun other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ServerTiems != other.ServerTiems) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ServerTiems != 0L) hash ^= ServerTiems.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ServerTiems != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ServerTiems);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServerTiems != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ServerTiems);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pkgSCGameRun other) {
      if (other == null) {
        return;
      }
      if (other.ServerTiems != 0L) {
        ServerTiems = other.ServerTiems;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ServerTiems = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///物体状态 id：x坐标*100+y坐标,start_time:状态改变时间,state：状态
  /// </summary>
  public sealed partial class pkgItemState : pb::IMessage<pkgItemState> {
    private static readonly pb::MessageParser<pkgItemState> _parser = new pb::MessageParser<pkgItemState>(() => new pkgItemState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgItemState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.GoldMinerReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pkgItemState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pkgItemState(pkgItemState other) : this() {
      id_ = other.id_;
      startTime_ = other.startTime_;
      state_ = other.state_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pkgItemState Clone() {
      return new pkgItemState(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "start_time" field.</summary>
    public const int StartTimeFieldNumber = 2;
    private long startTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 3;
    private int state_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as pkgItemState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(pkgItemState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (StartTime != other.StartTime) return false;
      if (State != other.State) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (StartTime != 0L) hash ^= StartTime.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (StartTime != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(StartTime);
      }
      if (State != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(State);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (StartTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartTime);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pkgItemState other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.StartTime != 0L) {
        StartTime = other.StartTime;
      }
      if (other.State != 0) {
        State = other.State;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            StartTime = input.ReadInt64();
            break;
          }
          case 24: {
            State = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///上传钩子状态
  /// </summary>
  public sealed partial class pkgCSUpHookState : pb::IMessage<pkgCSUpHookState> {
    private static readonly pb::MessageParser<pkgCSUpHookState> _parser = new pb::MessageParser<pkgCSUpHookState>(() => new pkgCSUpHookState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgCSUpHookState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.GoldMinerReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pkgCSUpHookState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pkgCSUpHookState(pkgCSUpHookState other) : this() {
      player_ = other.player_;
      startTime_ = other.startTime_;
      state_ = other.state_;
      x_ = other.x_;
      y_ = other.y_;
      rotaion_ = other.rotaion_;
      hitObj1_ = other.hitObj1_;
      hitObj1Time_ = other.hitObj1Time_;
      hitObj2_ = other.hitObj2_;
      hitObj2Time_ = other.hitObj2Time_;
      speedBuffer_ = other.speedBuffer_;
      currentSpeedX_ = other.currentSpeedX_;
      currentSpeedY_ = other.currentSpeedY_;
      btn1Obj_ = other.btn1Obj_;
      btn2Obj_ = other.btn2Obj_;
      speedBufferStartTime_ = other.speedBufferStartTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pkgCSUpHookState Clone() {
      return new pkgCSUpHookState(this);
    }

    /// <summary>Field number for the "player" field.</summary>
    public const int PlayerFieldNumber = 1;
    private int player_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Player {
      get { return player_; }
      set {
        player_ = value;
      }
    }

    /// <summary>Field number for the "start_time" field.</summary>
    public const int StartTimeFieldNumber = 2;
    private long startTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 3;
    private int state_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 4;
    private int x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 5;
    private int y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "rotaion" field.</summary>
    public const int RotaionFieldNumber = 6;
    private int rotaion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rotaion {
      get { return rotaion_; }
      set {
        rotaion_ = value;
      }
    }

    /// <summary>Field number for the "hit_obj1" field.</summary>
    public const int HitObj1FieldNumber = 7;
    private int hitObj1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HitObj1 {
      get { return hitObj1_; }
      set {
        hitObj1_ = value;
      }
    }

    /// <summary>Field number for the "hit_obj1_time" field.</summary>
    public const int HitObj1TimeFieldNumber = 8;
    private long hitObj1Time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long HitObj1Time {
      get { return hitObj1Time_; }
      set {
        hitObj1Time_ = value;
      }
    }

    /// <summary>Field number for the "hit_obj2" field.</summary>
    public const int HitObj2FieldNumber = 9;
    private int hitObj2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HitObj2 {
      get { return hitObj2_; }
      set {
        hitObj2_ = value;
      }
    }

    /// <summary>Field number for the "hit_obj2_time" field.</summary>
    public const int HitObj2TimeFieldNumber = 10;
    private long hitObj2Time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long HitObj2Time {
      get { return hitObj2Time_; }
      set {
        hitObj2Time_ = value;
      }
    }

    /// <summary>Field number for the "speed_buffer" field.</summary>
    public const int SpeedBufferFieldNumber = 11;
    private int speedBuffer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SpeedBuffer {
      get { return speedBuffer_; }
      set {
        speedBuffer_ = value;
      }
    }

    /// <summary>Field number for the "current_speed_x" field.</summary>
    public const int CurrentSpeedXFieldNumber = 12;
    private int currentSpeedX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrentSpeedX {
      get { return currentSpeedX_; }
      set {
        currentSpeedX_ = value;
      }
    }

    /// <summary>Field number for the "current_speed_y" field.</summary>
    public const int CurrentSpeedYFieldNumber = 13;
    private int currentSpeedY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrentSpeedY {
      get { return currentSpeedY_; }
      set {
        currentSpeedY_ = value;
      }
    }

    /// <summary>Field number for the "btn1_obj" field.</summary>
    public const int Btn1ObjFieldNumber = 14;
    private int btn1Obj_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Btn1Obj {
      get { return btn1Obj_; }
      set {
        btn1Obj_ = value;
      }
    }

    /// <summary>Field number for the "btn2_obj" field.</summary>
    public const int Btn2ObjFieldNumber = 15;
    private int btn2Obj_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Btn2Obj {
      get { return btn2Obj_; }
      set {
        btn2Obj_ = value;
      }
    }

    /// <summary>Field number for the "speed_buffer_start_time" field.</summary>
    public const int SpeedBufferStartTimeFieldNumber = 16;
    private long speedBufferStartTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SpeedBufferStartTime {
      get { return speedBufferStartTime_; }
      set {
        speedBufferStartTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as pkgCSUpHookState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(pkgCSUpHookState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Player != other.Player) return false;
      if (StartTime != other.StartTime) return false;
      if (State != other.State) return false;
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Rotaion != other.Rotaion) return false;
      if (HitObj1 != other.HitObj1) return false;
      if (HitObj1Time != other.HitObj1Time) return false;
      if (HitObj2 != other.HitObj2) return false;
      if (HitObj2Time != other.HitObj2Time) return false;
      if (SpeedBuffer != other.SpeedBuffer) return false;
      if (CurrentSpeedX != other.CurrentSpeedX) return false;
      if (CurrentSpeedY != other.CurrentSpeedY) return false;
      if (Btn1Obj != other.Btn1Obj) return false;
      if (Btn2Obj != other.Btn2Obj) return false;
      if (SpeedBufferStartTime != other.SpeedBufferStartTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Player != 0) hash ^= Player.GetHashCode();
      if (StartTime != 0L) hash ^= StartTime.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      if (X != 0) hash ^= X.GetHashCode();
      if (Y != 0) hash ^= Y.GetHashCode();
      if (Rotaion != 0) hash ^= Rotaion.GetHashCode();
      if (HitObj1 != 0) hash ^= HitObj1.GetHashCode();
      if (HitObj1Time != 0L) hash ^= HitObj1Time.GetHashCode();
      if (HitObj2 != 0) hash ^= HitObj2.GetHashCode();
      if (HitObj2Time != 0L) hash ^= HitObj2Time.GetHashCode();
      if (SpeedBuffer != 0) hash ^= SpeedBuffer.GetHashCode();
      if (CurrentSpeedX != 0) hash ^= CurrentSpeedX.GetHashCode();
      if (CurrentSpeedY != 0) hash ^= CurrentSpeedY.GetHashCode();
      if (Btn1Obj != 0) hash ^= Btn1Obj.GetHashCode();
      if (Btn2Obj != 0) hash ^= Btn2Obj.GetHashCode();
      if (SpeedBufferStartTime != 0L) hash ^= SpeedBufferStartTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Player != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Player);
      }
      if (StartTime != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(StartTime);
      }
      if (State != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(State);
      }
      if (X != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(X);
      }
      if (Y != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Y);
      }
      if (Rotaion != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Rotaion);
      }
      if (HitObj1 != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(HitObj1);
      }
      if (HitObj1Time != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(HitObj1Time);
      }
      if (HitObj2 != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(HitObj2);
      }
      if (HitObj2Time != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(HitObj2Time);
      }
      if (SpeedBuffer != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(SpeedBuffer);
      }
      if (CurrentSpeedX != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(CurrentSpeedX);
      }
      if (CurrentSpeedY != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(CurrentSpeedY);
      }
      if (Btn1Obj != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(Btn1Obj);
      }
      if (Btn2Obj != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(Btn2Obj);
      }
      if (SpeedBufferStartTime != 0L) {
        output.WriteRawTag(128, 1);
        output.WriteInt64(SpeedBufferStartTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Player != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Player);
      }
      if (StartTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartTime);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
      }
      if (X != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
      }
      if (Y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Y);
      }
      if (Rotaion != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rotaion);
      }
      if (HitObj1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HitObj1);
      }
      if (HitObj1Time != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(HitObj1Time);
      }
      if (HitObj2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HitObj2);
      }
      if (HitObj2Time != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(HitObj2Time);
      }
      if (SpeedBuffer != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpeedBuffer);
      }
      if (CurrentSpeedX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentSpeedX);
      }
      if (CurrentSpeedY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentSpeedY);
      }
      if (Btn1Obj != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Btn1Obj);
      }
      if (Btn2Obj != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Btn2Obj);
      }
      if (SpeedBufferStartTime != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(SpeedBufferStartTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pkgCSUpHookState other) {
      if (other == null) {
        return;
      }
      if (other.Player != 0) {
        Player = other.Player;
      }
      if (other.StartTime != 0L) {
        StartTime = other.StartTime;
      }
      if (other.State != 0) {
        State = other.State;
      }
      if (other.X != 0) {
        X = other.X;
      }
      if (other.Y != 0) {
        Y = other.Y;
      }
      if (other.Rotaion != 0) {
        Rotaion = other.Rotaion;
      }
      if (other.HitObj1 != 0) {
        HitObj1 = other.HitObj1;
      }
      if (other.HitObj1Time != 0L) {
        HitObj1Time = other.HitObj1Time;
      }
      if (other.HitObj2 != 0) {
        HitObj2 = other.HitObj2;
      }
      if (other.HitObj2Time != 0L) {
        HitObj2Time = other.HitObj2Time;
      }
      if (other.SpeedBuffer != 0) {
        SpeedBuffer = other.SpeedBuffer;
      }
      if (other.CurrentSpeedX != 0) {
        CurrentSpeedX = other.CurrentSpeedX;
      }
      if (other.CurrentSpeedY != 0) {
        CurrentSpeedY = other.CurrentSpeedY;
      }
      if (other.Btn1Obj != 0) {
        Btn1Obj = other.Btn1Obj;
      }
      if (other.Btn2Obj != 0) {
        Btn2Obj = other.Btn2Obj;
      }
      if (other.SpeedBufferStartTime != 0L) {
        SpeedBufferStartTime = other.SpeedBufferStartTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Player = input.ReadInt32();
            break;
          }
          case 16: {
            StartTime = input.ReadInt64();
            break;
          }
          case 24: {
            State = input.ReadInt32();
            break;
          }
          case 32: {
            X = input.ReadInt32();
            break;
          }
          case 40: {
            Y = input.ReadInt32();
            break;
          }
          case 48: {
            Rotaion = input.ReadInt32();
            break;
          }
          case 56: {
            HitObj1 = input.ReadInt32();
            break;
          }
          case 64: {
            HitObj1Time = input.ReadInt64();
            break;
          }
          case 72: {
            HitObj2 = input.ReadInt32();
            break;
          }
          case 80: {
            HitObj2Time = input.ReadInt64();
            break;
          }
          case 88: {
            SpeedBuffer = input.ReadInt32();
            break;
          }
          case 96: {
            CurrentSpeedX = input.ReadInt32();
            break;
          }
          case 104: {
            CurrentSpeedY = input.ReadInt32();
            break;
          }
          case 112: {
            Btn1Obj = input.ReadInt32();
            break;
          }
          case 120: {
            Btn2Obj = input.ReadInt32();
            break;
          }
          case 128: {
            SpeedBufferStartTime = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///服务器下发钩子状态
  /// </summary>
  public sealed partial class pkgSCHookState : pb::IMessage<pkgSCHookState> {
    private static readonly pb::MessageParser<pkgSCHookState> _parser = new pb::MessageParser<pkgSCHookState>(() => new pkgSCHookState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgSCHookState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.GoldMinerReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pkgSCHookState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pkgSCHookState(pkgSCHookState other) : this() {
      player_ = other.player_;
      startTime_ = other.startTime_;
      state_ = other.state_;
      x_ = other.x_;
      y_ = other.y_;
      rotaion_ = other.rotaion_;
      rotaionNext_ = other.rotaionNext_;
      hitObj_ = other.hitObj_;
      hitObj1Time_ = other.hitObj1Time_;
      speedBuffer_ = other.speedBuffer_;
      currentSpeedX_ = other.currentSpeedX_;
      currentSpeedY_ = other.currentSpeedY_;
      btn1Obj_ = other.btn1Obj_;
      btn2Obj_ = other.btn2Obj_;
      speedBufferStartTime_ = other.speedBufferStartTime_;
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pkgSCHookState Clone() {
      return new pkgSCHookState(this);
    }

    /// <summary>Field number for the "player" field.</summary>
    public const int PlayerFieldNumber = 1;
    private int player_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Player {
      get { return player_; }
      set {
        player_ = value;
      }
    }

    /// <summary>Field number for the "start_time" field.</summary>
    public const int StartTimeFieldNumber = 2;
    private long startTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 3;
    private int state_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 4;
    private int x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 5;
    private int y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "rotaion" field.</summary>
    public const int RotaionFieldNumber = 6;
    private int rotaion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rotaion {
      get { return rotaion_; }
      set {
        rotaion_ = value;
      }
    }

    /// <summary>Field number for the "rotaion_next" field.</summary>
    public const int RotaionNextFieldNumber = 7;
    private int rotaionNext_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RotaionNext {
      get { return rotaionNext_; }
      set {
        rotaionNext_ = value;
      }
    }

    /// <summary>Field number for the "hit_obj" field.</summary>
    public const int HitObjFieldNumber = 8;
    private int hitObj_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HitObj {
      get { return hitObj_; }
      set {
        hitObj_ = value;
      }
    }

    /// <summary>Field number for the "hit_obj1_time" field.</summary>
    public const int HitObj1TimeFieldNumber = 9;
    private long hitObj1Time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long HitObj1Time {
      get { return hitObj1Time_; }
      set {
        hitObj1Time_ = value;
      }
    }

    /// <summary>Field number for the "speed_buffer" field.</summary>
    public const int SpeedBufferFieldNumber = 10;
    private int speedBuffer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SpeedBuffer {
      get { return speedBuffer_; }
      set {
        speedBuffer_ = value;
      }
    }

    /// <summary>Field number for the "current_speed_x" field.</summary>
    public const int CurrentSpeedXFieldNumber = 11;
    private int currentSpeedX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrentSpeedX {
      get { return currentSpeedX_; }
      set {
        currentSpeedX_ = value;
      }
    }

    /// <summary>Field number for the "current_speed_y" field.</summary>
    public const int CurrentSpeedYFieldNumber = 12;
    private int currentSpeedY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrentSpeedY {
      get { return currentSpeedY_; }
      set {
        currentSpeedY_ = value;
      }
    }

    /// <summary>Field number for the "btn1_obj" field.</summary>
    public const int Btn1ObjFieldNumber = 13;
    private int btn1Obj_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Btn1Obj {
      get { return btn1Obj_; }
      set {
        btn1Obj_ = value;
      }
    }

    /// <summary>Field number for the "btn2_obj" field.</summary>
    public const int Btn2ObjFieldNumber = 14;
    private int btn2Obj_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Btn2Obj {
      get { return btn2Obj_; }
      set {
        btn2Obj_ = value;
      }
    }

    /// <summary>Field number for the "speed_buffer_start_time" field.</summary>
    public const int SpeedBufferStartTimeFieldNumber = 15;
    private long speedBufferStartTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SpeedBufferStartTime {
      get { return speedBufferStartTime_; }
      set {
        speedBufferStartTime_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 16;
    private long type_;
    /// <summary>
    ///1：转发 2：更正
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as pkgSCHookState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(pkgSCHookState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Player != other.Player) return false;
      if (StartTime != other.StartTime) return false;
      if (State != other.State) return false;
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Rotaion != other.Rotaion) return false;
      if (RotaionNext != other.RotaionNext) return false;
      if (HitObj != other.HitObj) return false;
      if (HitObj1Time != other.HitObj1Time) return false;
      if (SpeedBuffer != other.SpeedBuffer) return false;
      if (CurrentSpeedX != other.CurrentSpeedX) return false;
      if (CurrentSpeedY != other.CurrentSpeedY) return false;
      if (Btn1Obj != other.Btn1Obj) return false;
      if (Btn2Obj != other.Btn2Obj) return false;
      if (SpeedBufferStartTime != other.SpeedBufferStartTime) return false;
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Player != 0) hash ^= Player.GetHashCode();
      if (StartTime != 0L) hash ^= StartTime.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      if (X != 0) hash ^= X.GetHashCode();
      if (Y != 0) hash ^= Y.GetHashCode();
      if (Rotaion != 0) hash ^= Rotaion.GetHashCode();
      if (RotaionNext != 0) hash ^= RotaionNext.GetHashCode();
      if (HitObj != 0) hash ^= HitObj.GetHashCode();
      if (HitObj1Time != 0L) hash ^= HitObj1Time.GetHashCode();
      if (SpeedBuffer != 0) hash ^= SpeedBuffer.GetHashCode();
      if (CurrentSpeedX != 0) hash ^= CurrentSpeedX.GetHashCode();
      if (CurrentSpeedY != 0) hash ^= CurrentSpeedY.GetHashCode();
      if (Btn1Obj != 0) hash ^= Btn1Obj.GetHashCode();
      if (Btn2Obj != 0) hash ^= Btn2Obj.GetHashCode();
      if (SpeedBufferStartTime != 0L) hash ^= SpeedBufferStartTime.GetHashCode();
      if (Type != 0L) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Player != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Player);
      }
      if (StartTime != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(StartTime);
      }
      if (State != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(State);
      }
      if (X != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(X);
      }
      if (Y != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Y);
      }
      if (Rotaion != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Rotaion);
      }
      if (RotaionNext != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(RotaionNext);
      }
      if (HitObj != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(HitObj);
      }
      if (HitObj1Time != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(HitObj1Time);
      }
      if (SpeedBuffer != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(SpeedBuffer);
      }
      if (CurrentSpeedX != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(CurrentSpeedX);
      }
      if (CurrentSpeedY != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(CurrentSpeedY);
      }
      if (Btn1Obj != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(Btn1Obj);
      }
      if (Btn2Obj != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(Btn2Obj);
      }
      if (SpeedBufferStartTime != 0L) {
        output.WriteRawTag(120);
        output.WriteInt64(SpeedBufferStartTime);
      }
      if (Type != 0L) {
        output.WriteRawTag(128, 1);
        output.WriteInt64(Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Player != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Player);
      }
      if (StartTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartTime);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
      }
      if (X != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
      }
      if (Y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Y);
      }
      if (Rotaion != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rotaion);
      }
      if (RotaionNext != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RotaionNext);
      }
      if (HitObj != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HitObj);
      }
      if (HitObj1Time != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(HitObj1Time);
      }
      if (SpeedBuffer != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpeedBuffer);
      }
      if (CurrentSpeedX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentSpeedX);
      }
      if (CurrentSpeedY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentSpeedY);
      }
      if (Btn1Obj != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Btn1Obj);
      }
      if (Btn2Obj != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Btn2Obj);
      }
      if (SpeedBufferStartTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SpeedBufferStartTime);
      }
      if (Type != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pkgSCHookState other) {
      if (other == null) {
        return;
      }
      if (other.Player != 0) {
        Player = other.Player;
      }
      if (other.StartTime != 0L) {
        StartTime = other.StartTime;
      }
      if (other.State != 0) {
        State = other.State;
      }
      if (other.X != 0) {
        X = other.X;
      }
      if (other.Y != 0) {
        Y = other.Y;
      }
      if (other.Rotaion != 0) {
        Rotaion = other.Rotaion;
      }
      if (other.RotaionNext != 0) {
        RotaionNext = other.RotaionNext;
      }
      if (other.HitObj != 0) {
        HitObj = other.HitObj;
      }
      if (other.HitObj1Time != 0L) {
        HitObj1Time = other.HitObj1Time;
      }
      if (other.SpeedBuffer != 0) {
        SpeedBuffer = other.SpeedBuffer;
      }
      if (other.CurrentSpeedX != 0) {
        CurrentSpeedX = other.CurrentSpeedX;
      }
      if (other.CurrentSpeedY != 0) {
        CurrentSpeedY = other.CurrentSpeedY;
      }
      if (other.Btn1Obj != 0) {
        Btn1Obj = other.Btn1Obj;
      }
      if (other.Btn2Obj != 0) {
        Btn2Obj = other.Btn2Obj;
      }
      if (other.SpeedBufferStartTime != 0L) {
        SpeedBufferStartTime = other.SpeedBufferStartTime;
      }
      if (other.Type != 0L) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Player = input.ReadInt32();
            break;
          }
          case 16: {
            StartTime = input.ReadInt64();
            break;
          }
          case 24: {
            State = input.ReadInt32();
            break;
          }
          case 32: {
            X = input.ReadInt32();
            break;
          }
          case 40: {
            Y = input.ReadInt32();
            break;
          }
          case 48: {
            Rotaion = input.ReadInt32();
            break;
          }
          case 56: {
            RotaionNext = input.ReadInt32();
            break;
          }
          case 64: {
            HitObj = input.ReadInt32();
            break;
          }
          case 72: {
            HitObj1Time = input.ReadInt64();
            break;
          }
          case 80: {
            SpeedBuffer = input.ReadInt32();
            break;
          }
          case 88: {
            CurrentSpeedX = input.ReadInt32();
            break;
          }
          case 96: {
            CurrentSpeedY = input.ReadInt32();
            break;
          }
          case 104: {
            Btn1Obj = input.ReadInt32();
            break;
          }
          case 112: {
            Btn2Obj = input.ReadInt32();
            break;
          }
          case 120: {
            SpeedBufferStartTime = input.ReadInt64();
            break;
          }
          case 128: {
            Type = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///服务器下发状态改变
  /// </summary>
  public sealed partial class pkgDownState : pb::IMessage<pkgDownState> {
    private static readonly pb::MessageParser<pkgDownState> _parser = new pb::MessageParser<pkgDownState>(() => new pkgDownState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgDownState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.GoldMinerReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pkgDownState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pkgDownState(pkgDownState other) : this() {
      hookState_ = other.hookState_.Clone();
      itemStates_ = other.itemStates_.Clone();
      score1_ = other.score1_;
      score2_ = other.score2_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pkgDownState Clone() {
      return new pkgDownState(this);
    }

    /// <summary>Field number for the "HookState" field.</summary>
    public const int HookStateFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Protocol.pkgSCHookState> _repeated_hookState_codec
        = pb::FieldCodec.ForMessage(10, global::Protocol.pkgSCHookState.Parser);
    private readonly pbc::RepeatedField<global::Protocol.pkgSCHookState> hookState_ = new pbc::RepeatedField<global::Protocol.pkgSCHookState>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.pkgSCHookState> HookState {
      get { return hookState_; }
    }

    /// <summary>Field number for the "ItemStates" field.</summary>
    public const int ItemStatesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Protocol.pkgItemState> _repeated_itemStates_codec
        = pb::FieldCodec.ForMessage(18, global::Protocol.pkgItemState.Parser);
    private readonly pbc::RepeatedField<global::Protocol.pkgItemState> itemStates_ = new pbc::RepeatedField<global::Protocol.pkgItemState>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.pkgItemState> ItemStates {
      get { return itemStates_; }
    }

    /// <summary>Field number for the "score1" field.</summary>
    public const int Score1FieldNumber = 3;
    private int score1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Score1 {
      get { return score1_; }
      set {
        score1_ = value;
      }
    }

    /// <summary>Field number for the "score2" field.</summary>
    public const int Score2FieldNumber = 4;
    private int score2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Score2 {
      get { return score2_; }
      set {
        score2_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as pkgDownState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(pkgDownState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!hookState_.Equals(other.hookState_)) return false;
      if(!itemStates_.Equals(other.itemStates_)) return false;
      if (Score1 != other.Score1) return false;
      if (Score2 != other.Score2) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= hookState_.GetHashCode();
      hash ^= itemStates_.GetHashCode();
      if (Score1 != 0) hash ^= Score1.GetHashCode();
      if (Score2 != 0) hash ^= Score2.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      hookState_.WriteTo(output, _repeated_hookState_codec);
      itemStates_.WriteTo(output, _repeated_itemStates_codec);
      if (Score1 != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Score1);
      }
      if (Score2 != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Score2);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += hookState_.CalculateSize(_repeated_hookState_codec);
      size += itemStates_.CalculateSize(_repeated_itemStates_codec);
      if (Score1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Score1);
      }
      if (Score2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Score2);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pkgDownState other) {
      if (other == null) {
        return;
      }
      hookState_.Add(other.hookState_);
      itemStates_.Add(other.itemStates_);
      if (other.Score1 != 0) {
        Score1 = other.Score1;
      }
      if (other.Score2 != 0) {
        Score2 = other.Score2;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            hookState_.AddEntriesFrom(input, _repeated_hookState_codec);
            break;
          }
          case 18: {
            itemStates_.AddEntriesFrom(input, _repeated_itemStates_codec);
            break;
          }
          case 24: {
            Score1 = input.ReadInt32();
            break;
          }
          case 32: {
            Score2 = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class pkgSCStageCreateNoteiceRep : pb::IMessage<pkgSCStageCreateNoteiceRep> {
    private static readonly pb::MessageParser<pkgSCStageCreateNoteiceRep> _parser = new pb::MessageParser<pkgSCStageCreateNoteiceRep>(() => new pkgSCStageCreateNoteiceRep());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pkgSCStageCreateNoteiceRep> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.GoldMinerReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pkgSCStageCreateNoteiceRep() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pkgSCStageCreateNoteiceRep(pkgSCStageCreateNoteiceRep other) : this() {
      mapres_ = other.mapres_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pkgSCStageCreateNoteiceRep Clone() {
      return new pkgSCStageCreateNoteiceRep(this);
    }

    /// <summary>Field number for the "mapres" field.</summary>
    public const int MapresFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Protocol.MapRes> _repeated_mapres_codec
        = pb::FieldCodec.ForMessage(10, global::Protocol.MapRes.Parser);
    private readonly pbc::RepeatedField<global::Protocol.MapRes> mapres_ = new pbc::RepeatedField<global::Protocol.MapRes>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.MapRes> Mapres {
      get { return mapres_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as pkgSCStageCreateNoteiceRep);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(pkgSCStageCreateNoteiceRep other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!mapres_.Equals(other.mapres_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= mapres_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      mapres_.WriteTo(output, _repeated_mapres_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += mapres_.CalculateSize(_repeated_mapres_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pkgSCStageCreateNoteiceRep other) {
      if (other == null) {
        return;
      }
      mapres_.Add(other.mapres_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            mapres_.AddEntriesFrom(input, _repeated_mapres_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
